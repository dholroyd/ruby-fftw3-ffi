# Generated by ffi-gen. Please do not change this file by hand.

require 'ffi'

module FFTW3; end

module FFTW3::Lib
  extend FFI::Library
  ffi_lib 'fftw3'
  
  def self.attach_function(name, *_)
    begin; super; rescue FFI::NotFoundError => e
      (class << self; self; end).class_eval { define_method(name) { |*_| raise e } }
    end
  end
  
  FORWARD = (-1)
  
  BACKWARD = (+1)
  
  NO_TIMELIMIT = (-1.0)
  
  MEASURE = 0
  
  DESTROY_INPUT = (1<<0)
  
  UNALIGNED = (1<<1)
  
  CONSERVE_MEMORY = (1<<2)
  
  EXHAUSTIVE = (1<<3)
  
  PRESERVE_INPUT = (1<<4)
  
  PATIENT = (1<<5)
  
  ESTIMATE = (1<<6)
  
  WISDOM_ONLY = (1<<21)
  
  ESTIMATE_PATIENT = (1<<7)
  
  BELIEVE_PCOST = (1<<8)
  
  NO_DFT_R2HC = (1<<9)
  
  NO_NONTHREADED = (1<<10)
  
  NO_BUFFERING = (1<<11)
  
  NO_INDIRECT_OP = (1<<12)
  
  ALLOW_LARGE_GENERIC = (1<<13)
  
  NO_RANK_SPLITS = (1<<14)
  
  NO_VRANK_SPLITS = (1<<15)
  
  NO_VRECURSE = (1<<16)
  
  NO_SIMD = (1<<17)
  
  NO_SLOW = (1<<18)
  
  NO_FIXED_RADIX_LARGE_N = (1<<19)
  
  ALLOW_PRUNING = (1<<20)
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:r2r_kind).</em>
  # 
  # === Options:
  # :r2hc ::
  #   
  # :hc2r ::
  #   
  # :dht ::
  #   
  # :redft00 ::
  #   
  # :redft01 ::
  #   
  # :redft10 ::
  #   
  # :redft11 ::
  #   
  # :rodft00 ::
  #   
  # :rodft01 ::
  #   
  # :rodft10 ::
  #   
  # :rodft11 ::
  #   
  # 
  # @method _enum_r2r_kind_
  # @return [Symbol]
  # @scope class
  enum :r2r_kind, [
    :r2hc, 0,
    :hc2r, 1,
    :dht, 2,
    :redft00, 3,
    :redft01, 4,
    :redft10, 5,
    :redft11, 6,
    :rodft00, 7,
    :rodft01, 8,
    :rodft10, 9,
    :rodft11, 10
  ]
  
  # (Not documented)
  # 
  # = Fields:
  # :n ::
  #   (Integer) dimension size
  # :is ::
  #   (Integer) input stride
  # :os ::
  #   (Integer) output stride
  class FftwIodim < FFI::Struct
    layout :n, :int,
           :is, :int,
           :os, :int
  end
  
  # for ptrdiff_t
  # 
  # = Fields:
  # :n ::
  #   (Integer) dimension size
  # :is ::
  #   (Integer) input stride
  # :os ::
  #   (Integer) output stride
  class FftwIodim64 < FFI::Struct
    layout :n, :long,
           :is, :long,
           :os, :long
  end
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_fftw_write_char_func_do_not_use_me_(void)
  # @param [FFI::Pointer(*Void)] void 
  # @return [Integer] 
  # @scope class
  callback :fftw_write_char_func_do_not_use_me, [:pointer], :char
  
  # (Not documented)
  class FftwPlan < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # @method fftw_execute(p)
  # @param [Array<FftwPlan>] p 
  # @return [nil] 
  # @scope class
  attach_function :fftw_execute, :fftw_execute, [:pointer], :void
  
  # (Not documented)
  # 
  # @method fftw_plan_dft(rank, n, in_, out, sign, flags)
  # @param [Integer] rank 
  # @param [Array<Integer>] n 
  # @param [FFI::Pointer(*FftwComplex)] in_ 
  # @param [FFI::Pointer(*FftwComplex)] out 
  # @param [Integer] sign 
  # @param [Integer] flags 
  # @return [FftwPlan] 
  # @scope class
  attach_function :fftw_plan_dft, :fftw_plan_dft, [:int, :pointer, :pointer, :pointer, :int, :uint], FftwPlan
  
  # (Not documented)
  # 
  # @method fftw_plan_dft_1d(n, in_, out, sign, flags)
  # @param [Integer] n 
  # @param [FFI::Pointer(*FftwComplex)] in_ 
  # @param [FFI::Pointer(*FftwComplex)] out 
  # @param [Integer] sign 
  # @param [Integer] flags 
  # @return [FftwPlan] 
  # @scope class
  attach_function :fftw_plan_dft_1d, :fftw_plan_dft_1d, [:int, :pointer, :pointer, :int, :uint], FftwPlan
  
  # (Not documented)
  # 
  # @method fftw_plan_dft_2d(n0, n1, in_, out, sign, flags)
  # @param [Integer] n0 
  # @param [Integer] n1 
  # @param [FFI::Pointer(*FftwComplex)] in_ 
  # @param [FFI::Pointer(*FftwComplex)] out 
  # @param [Integer] sign 
  # @param [Integer] flags 
  # @return [FftwPlan] 
  # @scope class
  attach_function :fftw_plan_dft_2d, :fftw_plan_dft_2d, [:int, :int, :pointer, :pointer, :int, :uint], FftwPlan
  
  # (Not documented)
  # 
  # @method fftw_plan_dft_3d(n0, n1, n2, in_, out, sign, flags)
  # @param [Integer] n0 
  # @param [Integer] n1 
  # @param [Integer] n2 
  # @param [FFI::Pointer(*FftwComplex)] in_ 
  # @param [FFI::Pointer(*FftwComplex)] out 
  # @param [Integer] sign 
  # @param [Integer] flags 
  # @return [FftwPlan] 
  # @scope class
  attach_function :fftw_plan_dft_3d, :fftw_plan_dft_3d, [:int, :int, :int, :pointer, :pointer, :int, :uint], FftwPlan
  
  # (Not documented)
  # 
  # @method fftw_plan_many_dft(rank, n, howmany, in_, inembed, istride, idist, out, onembed, ostride, odist, sign, flags)
  # @param [Integer] rank 
  # @param [Array<Integer>] n 
  # @param [Integer] howmany 
  # @param [FFI::Pointer(*FftwComplex)] in_ 
  # @param [Array<Integer>] inembed 
  # @param [Integer] istride 
  # @param [Integer] idist 
  # @param [FFI::Pointer(*FftwComplex)] out 
  # @param [Array<Integer>] onembed 
  # @param [Integer] ostride 
  # @param [Integer] odist 
  # @param [Integer] sign 
  # @param [Integer] flags 
  # @return [FftwPlan] 
  # @scope class
  attach_function :fftw_plan_many_dft, :fftw_plan_many_dft, [:int, :pointer, :int, :pointer, :pointer, :int, :int, :pointer, :pointer, :int, :int, :int, :uint], FftwPlan
  
  # (Not documented)
  # 
  # @method fftw_plan_guru_dft(rank, dims, howmany_rank, howmany_dims, in_, out, sign, flags)
  # @param [Integer] rank 
  # @param [Array<unknown>] dims 
  # @param [Integer] howmany_rank 
  # @param [Array<unknown>] howmany_dims 
  # @param [FFI::Pointer(*FftwComplex)] in_ 
  # @param [FFI::Pointer(*FftwComplex)] out 
  # @param [Integer] sign 
  # @param [Integer] flags 
  # @return [FftwPlan] 
  # @scope class
  attach_function :fftw_plan_guru_dft, :fftw_plan_guru_dft, [:int, :pointer, :int, :pointer, :pointer, :pointer, :int, :uint], FftwPlan
  
  # (Not documented)
  # 
  # @method fftw_plan_guru_split_dft(rank, dims, howmany_rank, howmany_dims, ri, ii, ro, io, flags)
  # @param [Integer] rank 
  # @param [Array<unknown>] dims 
  # @param [Integer] howmany_rank 
  # @param [Array<unknown>] howmany_dims 
  # @param [FFI::Pointer(*Double)] ri 
  # @param [FFI::Pointer(*Double)] ii 
  # @param [FFI::Pointer(*Double)] ro 
  # @param [FFI::Pointer(*Double)] io 
  # @param [Integer] flags 
  # @return [FftwPlan] 
  # @scope class
  attach_function :fftw_plan_guru_split_dft, :fftw_plan_guru_split_dft, [:int, :pointer, :int, :pointer, :pointer, :pointer, :pointer, :pointer, :uint], FftwPlan
  
  # (Not documented)
  # 
  # @method fftw_plan_guru64_dft(rank, dims, howmany_rank, howmany_dims, in_, out, sign, flags)
  # @param [Integer] rank 
  # @param [Array<unknown>] dims 
  # @param [Integer] howmany_rank 
  # @param [Array<unknown>] howmany_dims 
  # @param [FFI::Pointer(*FftwComplex)] in_ 
  # @param [FFI::Pointer(*FftwComplex)] out 
  # @param [Integer] sign 
  # @param [Integer] flags 
  # @return [FftwPlan] 
  # @scope class
  attach_function :fftw_plan_guru64_dft, :fftw_plan_guru64_dft, [:int, :pointer, :int, :pointer, :pointer, :pointer, :int, :uint], FftwPlan
  
  # (Not documented)
  # 
  # @method fftw_plan_guru64_split_dft(rank, dims, howmany_rank, howmany_dims, ri, ii, ro, io, flags)
  # @param [Integer] rank 
  # @param [Array<unknown>] dims 
  # @param [Integer] howmany_rank 
  # @param [Array<unknown>] howmany_dims 
  # @param [FFI::Pointer(*Double)] ri 
  # @param [FFI::Pointer(*Double)] ii 
  # @param [FFI::Pointer(*Double)] ro 
  # @param [FFI::Pointer(*Double)] io 
  # @param [Integer] flags 
  # @return [FftwPlan] 
  # @scope class
  attach_function :fftw_plan_guru64_split_dft, :fftw_plan_guru64_split_dft, [:int, :pointer, :int, :pointer, :pointer, :pointer, :pointer, :pointer, :uint], FftwPlan
  
  # (Not documented)
  # 
  # @method fftw_execute_dft(p, in_, out)
  # @param [Array<FftwPlan>] p 
  # @param [FFI::Pointer(*FftwComplex)] in_ 
  # @param [FFI::Pointer(*FftwComplex)] out 
  # @return [nil] 
  # @scope class
  attach_function :fftw_execute_dft, :fftw_execute_dft, [:pointer, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method fftw_execute_split_dft(p, ri, ii, ro, io)
  # @param [Array<FftwPlan>] p 
  # @param [FFI::Pointer(*Double)] ri 
  # @param [FFI::Pointer(*Double)] ii 
  # @param [FFI::Pointer(*Double)] ro 
  # @param [FFI::Pointer(*Double)] io 
  # @return [nil] 
  # @scope class
  attach_function :fftw_execute_split_dft, :fftw_execute_split_dft, [:pointer, :pointer, :pointer, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method fftw_plan_many_dft_r2c(rank, n, howmany, in_, inembed, istride, idist, out, onembed, ostride, odist, flags)
  # @param [Integer] rank 
  # @param [Array<Integer>] n 
  # @param [Integer] howmany 
  # @param [FFI::Pointer(*Double)] in_ 
  # @param [Array<Integer>] inembed 
  # @param [Integer] istride 
  # @param [Integer] idist 
  # @param [FFI::Pointer(*FftwComplex)] out 
  # @param [Array<Integer>] onembed 
  # @param [Integer] ostride 
  # @param [Integer] odist 
  # @param [Integer] flags 
  # @return [FftwPlan] 
  # @scope class
  attach_function :fftw_plan_many_dft_r2c, :fftw_plan_many_dft_r2c, [:int, :pointer, :int, :pointer, :pointer, :int, :int, :pointer, :pointer, :int, :int, :uint], FftwPlan
  
  # (Not documented)
  # 
  # @method fftw_plan_dft_r2c(rank, n, in_, out, flags)
  # @param [Integer] rank 
  # @param [Array<Integer>] n 
  # @param [FFI::Pointer(*Double)] in_ 
  # @param [FFI::Pointer(*FftwComplex)] out 
  # @param [Integer] flags 
  # @return [FftwPlan] 
  # @scope class
  attach_function :fftw_plan_dft_r2c, :fftw_plan_dft_r2c, [:int, :pointer, :pointer, :pointer, :uint], FftwPlan
  
  # (Not documented)
  # 
  # @method fftw_plan_dft_r2c_1d(n, in_, out, flags)
  # @param [Integer] n 
  # @param [FFI::Pointer(*Double)] in_ 
  # @param [FFI::Pointer(*FftwComplex)] out 
  # @param [Integer] flags 
  # @return [FftwPlan] 
  # @scope class
  attach_function :fftw_plan_dft_r2c_1d, :fftw_plan_dft_r2c_1d, [:int, :pointer, :pointer, :uint], FftwPlan
  
  # (Not documented)
  # 
  # @method fftw_plan_dft_r2c_2d(n0, n1, in_, out, flags)
  # @param [Integer] n0 
  # @param [Integer] n1 
  # @param [FFI::Pointer(*Double)] in_ 
  # @param [FFI::Pointer(*FftwComplex)] out 
  # @param [Integer] flags 
  # @return [FftwPlan] 
  # @scope class
  attach_function :fftw_plan_dft_r2c_2d, :fftw_plan_dft_r2c_2d, [:int, :int, :pointer, :pointer, :uint], FftwPlan
  
  # (Not documented)
  # 
  # @method fftw_plan_dft_r2c_3d(n0, n1, n2, in_, out, flags)
  # @param [Integer] n0 
  # @param [Integer] n1 
  # @param [Integer] n2 
  # @param [FFI::Pointer(*Double)] in_ 
  # @param [FFI::Pointer(*FftwComplex)] out 
  # @param [Integer] flags 
  # @return [FftwPlan] 
  # @scope class
  attach_function :fftw_plan_dft_r2c_3d, :fftw_plan_dft_r2c_3d, [:int, :int, :int, :pointer, :pointer, :uint], FftwPlan
  
  # (Not documented)
  # 
  # @method fftw_plan_many_dft_c2r(rank, n, howmany, in_, inembed, istride, idist, out, onembed, ostride, odist, flags)
  # @param [Integer] rank 
  # @param [Array<Integer>] n 
  # @param [Integer] howmany 
  # @param [FFI::Pointer(*FftwComplex)] in_ 
  # @param [Array<Integer>] inembed 
  # @param [Integer] istride 
  # @param [Integer] idist 
  # @param [FFI::Pointer(*Double)] out 
  # @param [Array<Integer>] onembed 
  # @param [Integer] ostride 
  # @param [Integer] odist 
  # @param [Integer] flags 
  # @return [FftwPlan] 
  # @scope class
  attach_function :fftw_plan_many_dft_c2r, :fftw_plan_many_dft_c2r, [:int, :pointer, :int, :pointer, :pointer, :int, :int, :pointer, :pointer, :int, :int, :uint], FftwPlan
  
  # (Not documented)
  # 
  # @method fftw_plan_dft_c2r(rank, n, in_, out, flags)
  # @param [Integer] rank 
  # @param [Array<Integer>] n 
  # @param [FFI::Pointer(*FftwComplex)] in_ 
  # @param [FFI::Pointer(*Double)] out 
  # @param [Integer] flags 
  # @return [FftwPlan] 
  # @scope class
  attach_function :fftw_plan_dft_c2r, :fftw_plan_dft_c2r, [:int, :pointer, :pointer, :pointer, :uint], FftwPlan
  
  # (Not documented)
  # 
  # @method fftw_plan_dft_c2r_1d(n, in_, out, flags)
  # @param [Integer] n 
  # @param [FFI::Pointer(*FftwComplex)] in_ 
  # @param [FFI::Pointer(*Double)] out 
  # @param [Integer] flags 
  # @return [FftwPlan] 
  # @scope class
  attach_function :fftw_plan_dft_c2r_1d, :fftw_plan_dft_c2r_1d, [:int, :pointer, :pointer, :uint], FftwPlan
  
  # (Not documented)
  # 
  # @method fftw_plan_dft_c2r_2d(n0, n1, in_, out, flags)
  # @param [Integer] n0 
  # @param [Integer] n1 
  # @param [FFI::Pointer(*FftwComplex)] in_ 
  # @param [FFI::Pointer(*Double)] out 
  # @param [Integer] flags 
  # @return [FftwPlan] 
  # @scope class
  attach_function :fftw_plan_dft_c2r_2d, :fftw_plan_dft_c2r_2d, [:int, :int, :pointer, :pointer, :uint], FftwPlan
  
  # (Not documented)
  # 
  # @method fftw_plan_dft_c2r_3d(n0, n1, n2, in_, out, flags)
  # @param [Integer] n0 
  # @param [Integer] n1 
  # @param [Integer] n2 
  # @param [FFI::Pointer(*FftwComplex)] in_ 
  # @param [FFI::Pointer(*Double)] out 
  # @param [Integer] flags 
  # @return [FftwPlan] 
  # @scope class
  attach_function :fftw_plan_dft_c2r_3d, :fftw_plan_dft_c2r_3d, [:int, :int, :int, :pointer, :pointer, :uint], FftwPlan
  
  # (Not documented)
  # 
  # @method fftw_plan_guru_dft_r2c(rank, dims, howmany_rank, howmany_dims, in_, out, flags)
  # @param [Integer] rank 
  # @param [Array<unknown>] dims 
  # @param [Integer] howmany_rank 
  # @param [Array<unknown>] howmany_dims 
  # @param [FFI::Pointer(*Double)] in_ 
  # @param [FFI::Pointer(*FftwComplex)] out 
  # @param [Integer] flags 
  # @return [FftwPlan] 
  # @scope class
  attach_function :fftw_plan_guru_dft_r2c, :fftw_plan_guru_dft_r2c, [:int, :pointer, :int, :pointer, :pointer, :pointer, :uint], FftwPlan
  
  # (Not documented)
  # 
  # @method fftw_plan_guru_dft_c2r(rank, dims, howmany_rank, howmany_dims, in_, out, flags)
  # @param [Integer] rank 
  # @param [Array<unknown>] dims 
  # @param [Integer] howmany_rank 
  # @param [Array<unknown>] howmany_dims 
  # @param [FFI::Pointer(*FftwComplex)] in_ 
  # @param [FFI::Pointer(*Double)] out 
  # @param [Integer] flags 
  # @return [FftwPlan] 
  # @scope class
  attach_function :fftw_plan_guru_dft_c2r, :fftw_plan_guru_dft_c2r, [:int, :pointer, :int, :pointer, :pointer, :pointer, :uint], FftwPlan
  
  # (Not documented)
  # 
  # @method fftw_plan_guru_split_dft_r2c(rank, dims, howmany_rank, howmany_dims, in_, ro, io, flags)
  # @param [Integer] rank 
  # @param [Array<unknown>] dims 
  # @param [Integer] howmany_rank 
  # @param [Array<unknown>] howmany_dims 
  # @param [FFI::Pointer(*Double)] in_ 
  # @param [FFI::Pointer(*Double)] ro 
  # @param [FFI::Pointer(*Double)] io 
  # @param [Integer] flags 
  # @return [FftwPlan] 
  # @scope class
  attach_function :fftw_plan_guru_split_dft_r2c, :fftw_plan_guru_split_dft_r2c, [:int, :pointer, :int, :pointer, :pointer, :pointer, :pointer, :uint], FftwPlan
  
  # (Not documented)
  # 
  # @method fftw_plan_guru_split_dft_c2r(rank, dims, howmany_rank, howmany_dims, ri, ii, out, flags)
  # @param [Integer] rank 
  # @param [Array<unknown>] dims 
  # @param [Integer] howmany_rank 
  # @param [Array<unknown>] howmany_dims 
  # @param [FFI::Pointer(*Double)] ri 
  # @param [FFI::Pointer(*Double)] ii 
  # @param [FFI::Pointer(*Double)] out 
  # @param [Integer] flags 
  # @return [FftwPlan] 
  # @scope class
  attach_function :fftw_plan_guru_split_dft_c2r, :fftw_plan_guru_split_dft_c2r, [:int, :pointer, :int, :pointer, :pointer, :pointer, :pointer, :uint], FftwPlan
  
  # (Not documented)
  # 
  # @method fftw_plan_guru64_dft_r2c(rank, dims, howmany_rank, howmany_dims, in_, out, flags)
  # @param [Integer] rank 
  # @param [Array<unknown>] dims 
  # @param [Integer] howmany_rank 
  # @param [Array<unknown>] howmany_dims 
  # @param [FFI::Pointer(*Double)] in_ 
  # @param [FFI::Pointer(*FftwComplex)] out 
  # @param [Integer] flags 
  # @return [FftwPlan] 
  # @scope class
  attach_function :fftw_plan_guru64_dft_r2c, :fftw_plan_guru64_dft_r2c, [:int, :pointer, :int, :pointer, :pointer, :pointer, :uint], FftwPlan
  
  # (Not documented)
  # 
  # @method fftw_plan_guru64_dft_c2r(rank, dims, howmany_rank, howmany_dims, in_, out, flags)
  # @param [Integer] rank 
  # @param [Array<unknown>] dims 
  # @param [Integer] howmany_rank 
  # @param [Array<unknown>] howmany_dims 
  # @param [FFI::Pointer(*FftwComplex)] in_ 
  # @param [FFI::Pointer(*Double)] out 
  # @param [Integer] flags 
  # @return [FftwPlan] 
  # @scope class
  attach_function :fftw_plan_guru64_dft_c2r, :fftw_plan_guru64_dft_c2r, [:int, :pointer, :int, :pointer, :pointer, :pointer, :uint], FftwPlan
  
  # (Not documented)
  # 
  # @method fftw_plan_guru64_split_dft_r2c(rank, dims, howmany_rank, howmany_dims, in_, ro, io, flags)
  # @param [Integer] rank 
  # @param [Array<unknown>] dims 
  # @param [Integer] howmany_rank 
  # @param [Array<unknown>] howmany_dims 
  # @param [FFI::Pointer(*Double)] in_ 
  # @param [FFI::Pointer(*Double)] ro 
  # @param [FFI::Pointer(*Double)] io 
  # @param [Integer] flags 
  # @return [FftwPlan] 
  # @scope class
  attach_function :fftw_plan_guru64_split_dft_r2c, :fftw_plan_guru64_split_dft_r2c, [:int, :pointer, :int, :pointer, :pointer, :pointer, :pointer, :uint], FftwPlan
  
  # (Not documented)
  # 
  # @method fftw_plan_guru64_split_dft_c2r(rank, dims, howmany_rank, howmany_dims, ri, ii, out, flags)
  # @param [Integer] rank 
  # @param [Array<unknown>] dims 
  # @param [Integer] howmany_rank 
  # @param [Array<unknown>] howmany_dims 
  # @param [FFI::Pointer(*Double)] ri 
  # @param [FFI::Pointer(*Double)] ii 
  # @param [FFI::Pointer(*Double)] out 
  # @param [Integer] flags 
  # @return [FftwPlan] 
  # @scope class
  attach_function :fftw_plan_guru64_split_dft_c2r, :fftw_plan_guru64_split_dft_c2r, [:int, :pointer, :int, :pointer, :pointer, :pointer, :pointer, :uint], FftwPlan
  
  # (Not documented)
  # 
  # @method fftw_execute_dft_r2c(p, in_, out)
  # @param [Array<FftwPlan>] p 
  # @param [FFI::Pointer(*Double)] in_ 
  # @param [FFI::Pointer(*FftwComplex)] out 
  # @return [nil] 
  # @scope class
  attach_function :fftw_execute_dft_r2c, :fftw_execute_dft_r2c, [:pointer, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method fftw_execute_dft_c2r(p, in_, out)
  # @param [Array<FftwPlan>] p 
  # @param [FFI::Pointer(*FftwComplex)] in_ 
  # @param [FFI::Pointer(*Double)] out 
  # @return [nil] 
  # @scope class
  attach_function :fftw_execute_dft_c2r, :fftw_execute_dft_c2r, [:pointer, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method fftw_execute_split_dft_r2c(p, in_, ro, io)
  # @param [Array<FftwPlan>] p 
  # @param [FFI::Pointer(*Double)] in_ 
  # @param [FFI::Pointer(*Double)] ro 
  # @param [FFI::Pointer(*Double)] io 
  # @return [nil] 
  # @scope class
  attach_function :fftw_execute_split_dft_r2c, :fftw_execute_split_dft_r2c, [:pointer, :pointer, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method fftw_execute_split_dft_c2r(p, ri, ii, out)
  # @param [Array<FftwPlan>] p 
  # @param [FFI::Pointer(*Double)] ri 
  # @param [FFI::Pointer(*Double)] ii 
  # @param [FFI::Pointer(*Double)] out 
  # @return [nil] 
  # @scope class
  attach_function :fftw_execute_split_dft_c2r, :fftw_execute_split_dft_c2r, [:pointer, :pointer, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method fftw_plan_many_r2r(rank, n, howmany, in_, inembed, istride, idist, out, onembed, ostride, odist, kind, flags)
  # @param [Integer] rank 
  # @param [Array<Integer>] n 
  # @param [Integer] howmany 
  # @param [FFI::Pointer(*Double)] in_ 
  # @param [Array<Integer>] inembed 
  # @param [Integer] istride 
  # @param [Integer] idist 
  # @param [FFI::Pointer(*Double)] out 
  # @param [Array<Integer>] onembed 
  # @param [Integer] ostride 
  # @param [Integer] odist 
  # @param [Array<unknown>] kind 
  # @param [Integer] flags 
  # @return [FftwPlan] 
  # @scope class
  attach_function :fftw_plan_many_r2r, :fftw_plan_many_r2r, [:int, :pointer, :int, :pointer, :pointer, :int, :int, :pointer, :pointer, :int, :int, :pointer, :uint], FftwPlan
  
  # (Not documented)
  # 
  # @method fftw_plan_r2r(rank, n, in_, out, kind, flags)
  # @param [Integer] rank 
  # @param [Array<Integer>] n 
  # @param [FFI::Pointer(*Double)] in_ 
  # @param [FFI::Pointer(*Double)] out 
  # @param [Array<unknown>] kind 
  # @param [Integer] flags 
  # @return [FftwPlan] 
  # @scope class
  attach_function :fftw_plan_r2r, :fftw_plan_r2r, [:int, :pointer, :pointer, :pointer, :pointer, :uint], FftwPlan
  
  # (Not documented)
  # 
  # @method fftw_plan_r2r_1d(n, in_, out, kind, flags)
  # @param [Integer] n 
  # @param [FFI::Pointer(*Double)] in_ 
  # @param [FFI::Pointer(*Double)] out 
  # @param [Symbol from _enum_r2r_kind_] kind 
  # @param [Integer] flags 
  # @return [FftwPlan] 
  # @scope class
  attach_function :fftw_plan_r2r_1d, :fftw_plan_r2r_1d, [:int, :pointer, :pointer, :r2r_kind, :uint], FftwPlan
  
  # (Not documented)
  # 
  # @method fftw_plan_r2r_2d(n0, n1, in_, out, kind0, kind1, flags)
  # @param [Integer] n0 
  # @param [Integer] n1 
  # @param [FFI::Pointer(*Double)] in_ 
  # @param [FFI::Pointer(*Double)] out 
  # @param [Symbol from _enum_r2r_kind_] kind0 
  # @param [Symbol from _enum_r2r_kind_] kind1 
  # @param [Integer] flags 
  # @return [FftwPlan] 
  # @scope class
  attach_function :fftw_plan_r2r_2d, :fftw_plan_r2r_2d, [:int, :int, :pointer, :pointer, :r2r_kind, :r2r_kind, :uint], FftwPlan
  
  # (Not documented)
  # 
  # @method fftw_plan_r2r_3d(n0, n1, n2, in_, out, kind0, kind1, kind2, flags)
  # @param [Integer] n0 
  # @param [Integer] n1 
  # @param [Integer] n2 
  # @param [FFI::Pointer(*Double)] in_ 
  # @param [FFI::Pointer(*Double)] out 
  # @param [Symbol from _enum_r2r_kind_] kind0 
  # @param [Symbol from _enum_r2r_kind_] kind1 
  # @param [Symbol from _enum_r2r_kind_] kind2 
  # @param [Integer] flags 
  # @return [FftwPlan] 
  # @scope class
  attach_function :fftw_plan_r2r_3d, :fftw_plan_r2r_3d, [:int, :int, :int, :pointer, :pointer, :r2r_kind, :r2r_kind, :r2r_kind, :uint], FftwPlan
  
  # (Not documented)
  # 
  # @method fftw_plan_guru_r2r(rank, dims, howmany_rank, howmany_dims, in_, out, kind, flags)
  # @param [Integer] rank 
  # @param [Array<unknown>] dims 
  # @param [Integer] howmany_rank 
  # @param [Array<unknown>] howmany_dims 
  # @param [FFI::Pointer(*Double)] in_ 
  # @param [FFI::Pointer(*Double)] out 
  # @param [Array<unknown>] kind 
  # @param [Integer] flags 
  # @return [FftwPlan] 
  # @scope class
  attach_function :fftw_plan_guru_r2r, :fftw_plan_guru_r2r, [:int, :pointer, :int, :pointer, :pointer, :pointer, :pointer, :uint], FftwPlan
  
  # (Not documented)
  # 
  # @method fftw_plan_guru64_r2r(rank, dims, howmany_rank, howmany_dims, in_, out, kind, flags)
  # @param [Integer] rank 
  # @param [Array<unknown>] dims 
  # @param [Integer] howmany_rank 
  # @param [Array<unknown>] howmany_dims 
  # @param [FFI::Pointer(*Double)] in_ 
  # @param [FFI::Pointer(*Double)] out 
  # @param [Array<unknown>] kind 
  # @param [Integer] flags 
  # @return [FftwPlan] 
  # @scope class
  attach_function :fftw_plan_guru64_r2r, :fftw_plan_guru64_r2r, [:int, :pointer, :int, :pointer, :pointer, :pointer, :pointer, :uint], FftwPlan
  
  # (Not documented)
  # 
  # @method fftw_execute_r2r(p, in_, out)
  # @param [Array<FftwPlan>] p 
  # @param [FFI::Pointer(*Double)] in_ 
  # @param [FFI::Pointer(*Double)] out 
  # @return [nil] 
  # @scope class
  attach_function :fftw_execute_r2r, :fftw_execute_r2r, [:pointer, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method fftw_destroy_plan(p)
  # @param [FftwPlan] p 
  # @return [nil] 
  # @scope class
  attach_function :fftw_destroy_plan, :fftw_destroy_plan, [FftwPlan], :void
  
  # (Not documented)
  # 
  # @method fftw_forget_wisdom()
  # @return [nil] 
  # @scope class
  attach_function :fftw_forget_wisdom, :fftw_forget_wisdom, [], :void
  
  # (Not documented)
  # 
  # @method fftw_cleanup()
  # @return [nil] 
  # @scope class
  attach_function :fftw_cleanup, :fftw_cleanup, [], :void
  
  # (Not documented)
  # 
  # @method fftw_set_timelimit(t)
  # @param [Float] t 
  # @return [nil] 
  # @scope class
  attach_function :fftw_set_timelimit, :fftw_set_timelimit, [:double], :void
  
  # (Not documented)
  # 
  # @method fftw_plan_with_nthreads(nthreads)
  # @param [Integer] nthreads 
  # @return [nil] 
  # @scope class
  attach_function :fftw_plan_with_nthreads, :fftw_plan_with_nthreads, [:int], :void
  
  # (Not documented)
  # 
  # @method fftw_init_threads()
  # @return [Integer] 
  # @scope class
  attach_function :fftw_init_threads, :fftw_init_threads, [], :int
  
  # (Not documented)
  # 
  # @method fftw_cleanup_threads()
  # @return [nil] 
  # @scope class
  attach_function :fftw_cleanup_threads, :fftw_cleanup_threads, [], :void
  
  # (Not documented)
  # 
  # @method fftw_export_wisdom_to_filename(filename)
  # @param [Array<Integer>] filename 
  # @return [Integer] 
  # @scope class
  attach_function :fftw_export_wisdom_to_filename, :fftw_export_wisdom_to_filename, [:pointer], :int
  
  # (Not documented)
  # 
  # @method fftw_export_wisdom_to_file(output_file)
  # @param [Array<unknown>] output_file 
  # @return [nil] 
  # @scope class
  attach_function :fftw_export_wisdom_to_file, :fftw_export_wisdom_to_file, [:pointer], :void
  
  # (Not documented)
  # 
  # @method fftw_export_wisdom_to_string()
  # @return [String] 
  # @scope class
  attach_function :fftw_export_wisdom_to_string, :fftw_export_wisdom_to_string, [], :string
  
  # (Not documented)
  # 
  # @method fftw_export_wisdom(write_char, data)
  # @param [FFI::Pointer(FftwWriteCharFunc)] write_char 
  # @param [Array<nil>] data 
  # @return [nil] 
  # @scope class
  attach_function :fftw_export_wisdom, :fftw_export_wisdom, [:pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method fftw_import_system_wisdom()
  # @return [Integer] 
  # @scope class
  attach_function :fftw_import_system_wisdom, :fftw_import_system_wisdom, [], :int
  
  # (Not documented)
  # 
  # @method fftw_import_wisdom_from_filename(filename)
  # @param [Array<Integer>] filename 
  # @return [Integer] 
  # @scope class
  attach_function :fftw_import_wisdom_from_filename, :fftw_import_wisdom_from_filename, [:pointer], :int
  
  # (Not documented)
  # 
  # @method fftw_import_wisdom_from_file(input_file)
  # @param [Array<unknown>] input_file 
  # @return [Integer] 
  # @scope class
  attach_function :fftw_import_wisdom_from_file, :fftw_import_wisdom_from_file, [:pointer], :int
  
  # (Not documented)
  # 
  # @method fftw_import_wisdom_from_string(input_string)
  # @param [Array<Integer>] input_string 
  # @return [Integer] 
  # @scope class
  attach_function :fftw_import_wisdom_from_string, :fftw_import_wisdom_from_string, [:pointer], :int
  
  # (Not documented)
  # 
  # @method fftw_import_wisdom(read_char, data)
  # @param [FFI::Pointer(FftwReadCharFunc)] read_char 
  # @param [Array<nil>] data 
  # @return [Integer] 
  # @scope class
  attach_function :fftw_import_wisdom, :fftw_import_wisdom, [:pointer, :pointer], :int
  
  # (Not documented)
  # 
  # @method fftw_fprint_plan(p, output_file)
  # @param [Array<FftwPlan>] p 
  # @param [Array<unknown>] output_file 
  # @return [nil] 
  # @scope class
  attach_function :fftw_fprint_plan, :fftw_fprint_plan, [:pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method fftw_print_plan(p)
  # @param [Array<FftwPlan>] p 
  # @return [nil] 
  # @scope class
  attach_function :fftw_print_plan, :fftw_print_plan, [:pointer], :void
  
  # (Not documented)
  # 
  # @method fftw_sprint_plan(p)
  # @param [Array<FftwPlan>] p 
  # @return [String] 
  # @scope class
  attach_function :fftw_sprint_plan, :fftw_sprint_plan, [:pointer], :string
  
  # (Not documented)
  # 
  # @method fftw_malloc(n)
  # @param [Integer] n 
  # @return [FFI::Pointer(*Void)] 
  # @scope class
  attach_function :fftw_malloc, :fftw_malloc, [:ulong], :pointer
  
  # (Not documented)
  # 
  # @method fftw_alloc_real(n)
  # @param [Integer] n 
  # @return [FFI::Pointer(*Double)] 
  # @scope class
  attach_function :fftw_alloc_real, :fftw_alloc_real, [:ulong], :pointer
  
  # (Not documented)
  # 
  # @method fftw_alloc_complex(n)
  # @param [Integer] n 
  # @return [FFI::Pointer(*FftwComplex)] 
  # @scope class
  attach_function :fftw_alloc_complex, :fftw_alloc_complex, [:ulong], :pointer
  
  # (Not documented)
  # 
  # @method fftw_free(p)
  # @param [Array<nil>] p 
  # @return [nil] 
  # @scope class
  attach_function :fftw_free, :fftw_free, [:pointer], :void
  
  # (Not documented)
  # 
  # @method fftw_flops(p, add, mul, fmas)
  # @param [Array<FftwPlan>] p 
  # @param [Array<Float>] add 
  # @param [Array<Float>] mul 
  # @param [Array<Float>] fmas 
  # @return [nil] 
  # @scope class
  attach_function :fftw_flops, :fftw_flops, [:pointer, :pointer, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method fftw_estimate_cost(p)
  # @param [Array<FftwPlan>] p 
  # @return [Float] 
  # @scope class
  attach_function :fftw_estimate_cost, :fftw_estimate_cost, [:pointer], :double
  
  # (Not documented)
  # 
  # @method fftw_cost(p)
  # @param [Array<FftwPlan>] p 
  # @return [Float] 
  # @scope class
  attach_function :fftw_cost, :fftw_cost, [:pointer], :double
  
  # (Not documented)
  # 
  # @method fftw_alignment_of(p)
  # @param [FFI::Pointer(*Double)] p 
  # @return [Integer] 
  # @scope class
  attach_function :fftw_alignment_of, :fftw_alignment_of, [:pointer], :int
  
  # (Not documented)
  class FftwfPlan < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # @method fftwf_execute(p)
  # @param [Array<FftwfPlan>] p 
  # @return [nil] 
  # @scope class
  attach_function :fftwf_execute, :fftwf_execute, [:pointer], :void
  
  # (Not documented)
  # 
  # @method fftwf_plan_dft(rank, n, in_, out, sign, flags)
  # @param [Integer] rank 
  # @param [Array<Integer>] n 
  # @param [FFI::Pointer(*FftwfComplex)] in_ 
  # @param [FFI::Pointer(*FftwfComplex)] out 
  # @param [Integer] sign 
  # @param [Integer] flags 
  # @return [FftwfPlan] 
  # @scope class
  attach_function :fftwf_plan_dft, :fftwf_plan_dft, [:int, :pointer, :pointer, :pointer, :int, :uint], FftwfPlan
  
  # (Not documented)
  # 
  # @method fftwf_plan_dft_1d(n, in_, out, sign, flags)
  # @param [Integer] n 
  # @param [FFI::Pointer(*FftwfComplex)] in_ 
  # @param [FFI::Pointer(*FftwfComplex)] out 
  # @param [Integer] sign 
  # @param [Integer] flags 
  # @return [FftwfPlan] 
  # @scope class
  attach_function :fftwf_plan_dft_1d, :fftwf_plan_dft_1d, [:int, :pointer, :pointer, :int, :uint], FftwfPlan
  
  # (Not documented)
  # 
  # @method fftwf_plan_dft_2d(n0, n1, in_, out, sign, flags)
  # @param [Integer] n0 
  # @param [Integer] n1 
  # @param [FFI::Pointer(*FftwfComplex)] in_ 
  # @param [FFI::Pointer(*FftwfComplex)] out 
  # @param [Integer] sign 
  # @param [Integer] flags 
  # @return [FftwfPlan] 
  # @scope class
  attach_function :fftwf_plan_dft_2d, :fftwf_plan_dft_2d, [:int, :int, :pointer, :pointer, :int, :uint], FftwfPlan
  
  # (Not documented)
  # 
  # @method fftwf_plan_dft_3d(n0, n1, n2, in_, out, sign, flags)
  # @param [Integer] n0 
  # @param [Integer] n1 
  # @param [Integer] n2 
  # @param [FFI::Pointer(*FftwfComplex)] in_ 
  # @param [FFI::Pointer(*FftwfComplex)] out 
  # @param [Integer] sign 
  # @param [Integer] flags 
  # @return [FftwfPlan] 
  # @scope class
  attach_function :fftwf_plan_dft_3d, :fftwf_plan_dft_3d, [:int, :int, :int, :pointer, :pointer, :int, :uint], FftwfPlan
  
  # (Not documented)
  # 
  # @method fftwf_plan_many_dft(rank, n, howmany, in_, inembed, istride, idist, out, onembed, ostride, odist, sign, flags)
  # @param [Integer] rank 
  # @param [Array<Integer>] n 
  # @param [Integer] howmany 
  # @param [FFI::Pointer(*FftwfComplex)] in_ 
  # @param [Array<Integer>] inembed 
  # @param [Integer] istride 
  # @param [Integer] idist 
  # @param [FFI::Pointer(*FftwfComplex)] out 
  # @param [Array<Integer>] onembed 
  # @param [Integer] ostride 
  # @param [Integer] odist 
  # @param [Integer] sign 
  # @param [Integer] flags 
  # @return [FftwfPlan] 
  # @scope class
  attach_function :fftwf_plan_many_dft, :fftwf_plan_many_dft, [:int, :pointer, :int, :pointer, :pointer, :int, :int, :pointer, :pointer, :int, :int, :int, :uint], FftwfPlan
  
  # (Not documented)
  # 
  # @method fftwf_plan_guru_dft(rank, dims, howmany_rank, howmany_dims, in_, out, sign, flags)
  # @param [Integer] rank 
  # @param [Array<unknown>] dims 
  # @param [Integer] howmany_rank 
  # @param [Array<unknown>] howmany_dims 
  # @param [FFI::Pointer(*FftwfComplex)] in_ 
  # @param [FFI::Pointer(*FftwfComplex)] out 
  # @param [Integer] sign 
  # @param [Integer] flags 
  # @return [FftwfPlan] 
  # @scope class
  attach_function :fftwf_plan_guru_dft, :fftwf_plan_guru_dft, [:int, :pointer, :int, :pointer, :pointer, :pointer, :int, :uint], FftwfPlan
  
  # (Not documented)
  # 
  # @method fftwf_plan_guru_split_dft(rank, dims, howmany_rank, howmany_dims, ri, ii, ro, io, flags)
  # @param [Integer] rank 
  # @param [Array<unknown>] dims 
  # @param [Integer] howmany_rank 
  # @param [Array<unknown>] howmany_dims 
  # @param [FFI::Pointer(*Float)] ri 
  # @param [FFI::Pointer(*Float)] ii 
  # @param [FFI::Pointer(*Float)] ro 
  # @param [FFI::Pointer(*Float)] io 
  # @param [Integer] flags 
  # @return [FftwfPlan] 
  # @scope class
  attach_function :fftwf_plan_guru_split_dft, :fftwf_plan_guru_split_dft, [:int, :pointer, :int, :pointer, :pointer, :pointer, :pointer, :pointer, :uint], FftwfPlan
  
  # (Not documented)
  # 
  # @method fftwf_plan_guru64_dft(rank, dims, howmany_rank, howmany_dims, in_, out, sign, flags)
  # @param [Integer] rank 
  # @param [Array<unknown>] dims 
  # @param [Integer] howmany_rank 
  # @param [Array<unknown>] howmany_dims 
  # @param [FFI::Pointer(*FftwfComplex)] in_ 
  # @param [FFI::Pointer(*FftwfComplex)] out 
  # @param [Integer] sign 
  # @param [Integer] flags 
  # @return [FftwfPlan] 
  # @scope class
  attach_function :fftwf_plan_guru64_dft, :fftwf_plan_guru64_dft, [:int, :pointer, :int, :pointer, :pointer, :pointer, :int, :uint], FftwfPlan
  
  # (Not documented)
  # 
  # @method fftwf_plan_guru64_split_dft(rank, dims, howmany_rank, howmany_dims, ri, ii, ro, io, flags)
  # @param [Integer] rank 
  # @param [Array<unknown>] dims 
  # @param [Integer] howmany_rank 
  # @param [Array<unknown>] howmany_dims 
  # @param [FFI::Pointer(*Float)] ri 
  # @param [FFI::Pointer(*Float)] ii 
  # @param [FFI::Pointer(*Float)] ro 
  # @param [FFI::Pointer(*Float)] io 
  # @param [Integer] flags 
  # @return [FftwfPlan] 
  # @scope class
  attach_function :fftwf_plan_guru64_split_dft, :fftwf_plan_guru64_split_dft, [:int, :pointer, :int, :pointer, :pointer, :pointer, :pointer, :pointer, :uint], FftwfPlan
  
  # (Not documented)
  # 
  # @method fftwf_execute_dft(p, in_, out)
  # @param [Array<FftwfPlan>] p 
  # @param [FFI::Pointer(*FftwfComplex)] in_ 
  # @param [FFI::Pointer(*FftwfComplex)] out 
  # @return [nil] 
  # @scope class
  attach_function :fftwf_execute_dft, :fftwf_execute_dft, [:pointer, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method fftwf_execute_split_dft(p, ri, ii, ro, io)
  # @param [Array<FftwfPlan>] p 
  # @param [FFI::Pointer(*Float)] ri 
  # @param [FFI::Pointer(*Float)] ii 
  # @param [FFI::Pointer(*Float)] ro 
  # @param [FFI::Pointer(*Float)] io 
  # @return [nil] 
  # @scope class
  attach_function :fftwf_execute_split_dft, :fftwf_execute_split_dft, [:pointer, :pointer, :pointer, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method fftwf_plan_many_dft_r2c(rank, n, howmany, in_, inembed, istride, idist, out, onembed, ostride, odist, flags)
  # @param [Integer] rank 
  # @param [Array<Integer>] n 
  # @param [Integer] howmany 
  # @param [FFI::Pointer(*Float)] in_ 
  # @param [Array<Integer>] inembed 
  # @param [Integer] istride 
  # @param [Integer] idist 
  # @param [FFI::Pointer(*FftwfComplex)] out 
  # @param [Array<Integer>] onembed 
  # @param [Integer] ostride 
  # @param [Integer] odist 
  # @param [Integer] flags 
  # @return [FftwfPlan] 
  # @scope class
  attach_function :fftwf_plan_many_dft_r2c, :fftwf_plan_many_dft_r2c, [:int, :pointer, :int, :pointer, :pointer, :int, :int, :pointer, :pointer, :int, :int, :uint], FftwfPlan
  
  # (Not documented)
  # 
  # @method fftwf_plan_dft_r2c(rank, n, in_, out, flags)
  # @param [Integer] rank 
  # @param [Array<Integer>] n 
  # @param [FFI::Pointer(*Float)] in_ 
  # @param [FFI::Pointer(*FftwfComplex)] out 
  # @param [Integer] flags 
  # @return [FftwfPlan] 
  # @scope class
  attach_function :fftwf_plan_dft_r2c, :fftwf_plan_dft_r2c, [:int, :pointer, :pointer, :pointer, :uint], FftwfPlan
  
  # (Not documented)
  # 
  # @method fftwf_plan_dft_r2c_1d(n, in_, out, flags)
  # @param [Integer] n 
  # @param [FFI::Pointer(*Float)] in_ 
  # @param [FFI::Pointer(*FftwfComplex)] out 
  # @param [Integer] flags 
  # @return [FftwfPlan] 
  # @scope class
  attach_function :fftwf_plan_dft_r2c_1d, :fftwf_plan_dft_r2c_1d, [:int, :pointer, :pointer, :uint], FftwfPlan
  
  # (Not documented)
  # 
  # @method fftwf_plan_dft_r2c_2d(n0, n1, in_, out, flags)
  # @param [Integer] n0 
  # @param [Integer] n1 
  # @param [FFI::Pointer(*Float)] in_ 
  # @param [FFI::Pointer(*FftwfComplex)] out 
  # @param [Integer] flags 
  # @return [FftwfPlan] 
  # @scope class
  attach_function :fftwf_plan_dft_r2c_2d, :fftwf_plan_dft_r2c_2d, [:int, :int, :pointer, :pointer, :uint], FftwfPlan
  
  # (Not documented)
  # 
  # @method fftwf_plan_dft_r2c_3d(n0, n1, n2, in_, out, flags)
  # @param [Integer] n0 
  # @param [Integer] n1 
  # @param [Integer] n2 
  # @param [FFI::Pointer(*Float)] in_ 
  # @param [FFI::Pointer(*FftwfComplex)] out 
  # @param [Integer] flags 
  # @return [FftwfPlan] 
  # @scope class
  attach_function :fftwf_plan_dft_r2c_3d, :fftwf_plan_dft_r2c_3d, [:int, :int, :int, :pointer, :pointer, :uint], FftwfPlan
  
  # (Not documented)
  # 
  # @method fftwf_plan_many_dft_c2r(rank, n, howmany, in_, inembed, istride, idist, out, onembed, ostride, odist, flags)
  # @param [Integer] rank 
  # @param [Array<Integer>] n 
  # @param [Integer] howmany 
  # @param [FFI::Pointer(*FftwfComplex)] in_ 
  # @param [Array<Integer>] inembed 
  # @param [Integer] istride 
  # @param [Integer] idist 
  # @param [FFI::Pointer(*Float)] out 
  # @param [Array<Integer>] onembed 
  # @param [Integer] ostride 
  # @param [Integer] odist 
  # @param [Integer] flags 
  # @return [FftwfPlan] 
  # @scope class
  attach_function :fftwf_plan_many_dft_c2r, :fftwf_plan_many_dft_c2r, [:int, :pointer, :int, :pointer, :pointer, :int, :int, :pointer, :pointer, :int, :int, :uint], FftwfPlan
  
  # (Not documented)
  # 
  # @method fftwf_plan_dft_c2r(rank, n, in_, out, flags)
  # @param [Integer] rank 
  # @param [Array<Integer>] n 
  # @param [FFI::Pointer(*FftwfComplex)] in_ 
  # @param [FFI::Pointer(*Float)] out 
  # @param [Integer] flags 
  # @return [FftwfPlan] 
  # @scope class
  attach_function :fftwf_plan_dft_c2r, :fftwf_plan_dft_c2r, [:int, :pointer, :pointer, :pointer, :uint], FftwfPlan
  
  # (Not documented)
  # 
  # @method fftwf_plan_dft_c2r_1d(n, in_, out, flags)
  # @param [Integer] n 
  # @param [FFI::Pointer(*FftwfComplex)] in_ 
  # @param [FFI::Pointer(*Float)] out 
  # @param [Integer] flags 
  # @return [FftwfPlan] 
  # @scope class
  attach_function :fftwf_plan_dft_c2r_1d, :fftwf_plan_dft_c2r_1d, [:int, :pointer, :pointer, :uint], FftwfPlan
  
  # (Not documented)
  # 
  # @method fftwf_plan_dft_c2r_2d(n0, n1, in_, out, flags)
  # @param [Integer] n0 
  # @param [Integer] n1 
  # @param [FFI::Pointer(*FftwfComplex)] in_ 
  # @param [FFI::Pointer(*Float)] out 
  # @param [Integer] flags 
  # @return [FftwfPlan] 
  # @scope class
  attach_function :fftwf_plan_dft_c2r_2d, :fftwf_plan_dft_c2r_2d, [:int, :int, :pointer, :pointer, :uint], FftwfPlan
  
  # (Not documented)
  # 
  # @method fftwf_plan_dft_c2r_3d(n0, n1, n2, in_, out, flags)
  # @param [Integer] n0 
  # @param [Integer] n1 
  # @param [Integer] n2 
  # @param [FFI::Pointer(*FftwfComplex)] in_ 
  # @param [FFI::Pointer(*Float)] out 
  # @param [Integer] flags 
  # @return [FftwfPlan] 
  # @scope class
  attach_function :fftwf_plan_dft_c2r_3d, :fftwf_plan_dft_c2r_3d, [:int, :int, :int, :pointer, :pointer, :uint], FftwfPlan
  
  # (Not documented)
  # 
  # @method fftwf_plan_guru_dft_r2c(rank, dims, howmany_rank, howmany_dims, in_, out, flags)
  # @param [Integer] rank 
  # @param [Array<unknown>] dims 
  # @param [Integer] howmany_rank 
  # @param [Array<unknown>] howmany_dims 
  # @param [FFI::Pointer(*Float)] in_ 
  # @param [FFI::Pointer(*FftwfComplex)] out 
  # @param [Integer] flags 
  # @return [FftwfPlan] 
  # @scope class
  attach_function :fftwf_plan_guru_dft_r2c, :fftwf_plan_guru_dft_r2c, [:int, :pointer, :int, :pointer, :pointer, :pointer, :uint], FftwfPlan
  
  # (Not documented)
  # 
  # @method fftwf_plan_guru_dft_c2r(rank, dims, howmany_rank, howmany_dims, in_, out, flags)
  # @param [Integer] rank 
  # @param [Array<unknown>] dims 
  # @param [Integer] howmany_rank 
  # @param [Array<unknown>] howmany_dims 
  # @param [FFI::Pointer(*FftwfComplex)] in_ 
  # @param [FFI::Pointer(*Float)] out 
  # @param [Integer] flags 
  # @return [FftwfPlan] 
  # @scope class
  attach_function :fftwf_plan_guru_dft_c2r, :fftwf_plan_guru_dft_c2r, [:int, :pointer, :int, :pointer, :pointer, :pointer, :uint], FftwfPlan
  
  # (Not documented)
  # 
  # @method fftwf_plan_guru_split_dft_r2c(rank, dims, howmany_rank, howmany_dims, in_, ro, io, flags)
  # @param [Integer] rank 
  # @param [Array<unknown>] dims 
  # @param [Integer] howmany_rank 
  # @param [Array<unknown>] howmany_dims 
  # @param [FFI::Pointer(*Float)] in_ 
  # @param [FFI::Pointer(*Float)] ro 
  # @param [FFI::Pointer(*Float)] io 
  # @param [Integer] flags 
  # @return [FftwfPlan] 
  # @scope class
  attach_function :fftwf_plan_guru_split_dft_r2c, :fftwf_plan_guru_split_dft_r2c, [:int, :pointer, :int, :pointer, :pointer, :pointer, :pointer, :uint], FftwfPlan
  
  # (Not documented)
  # 
  # @method fftwf_plan_guru_split_dft_c2r(rank, dims, howmany_rank, howmany_dims, ri, ii, out, flags)
  # @param [Integer] rank 
  # @param [Array<unknown>] dims 
  # @param [Integer] howmany_rank 
  # @param [Array<unknown>] howmany_dims 
  # @param [FFI::Pointer(*Float)] ri 
  # @param [FFI::Pointer(*Float)] ii 
  # @param [FFI::Pointer(*Float)] out 
  # @param [Integer] flags 
  # @return [FftwfPlan] 
  # @scope class
  attach_function :fftwf_plan_guru_split_dft_c2r, :fftwf_plan_guru_split_dft_c2r, [:int, :pointer, :int, :pointer, :pointer, :pointer, :pointer, :uint], FftwfPlan
  
  # (Not documented)
  # 
  # @method fftwf_plan_guru64_dft_r2c(rank, dims, howmany_rank, howmany_dims, in_, out, flags)
  # @param [Integer] rank 
  # @param [Array<unknown>] dims 
  # @param [Integer] howmany_rank 
  # @param [Array<unknown>] howmany_dims 
  # @param [FFI::Pointer(*Float)] in_ 
  # @param [FFI::Pointer(*FftwfComplex)] out 
  # @param [Integer] flags 
  # @return [FftwfPlan] 
  # @scope class
  attach_function :fftwf_plan_guru64_dft_r2c, :fftwf_plan_guru64_dft_r2c, [:int, :pointer, :int, :pointer, :pointer, :pointer, :uint], FftwfPlan
  
  # (Not documented)
  # 
  # @method fftwf_plan_guru64_dft_c2r(rank, dims, howmany_rank, howmany_dims, in_, out, flags)
  # @param [Integer] rank 
  # @param [Array<unknown>] dims 
  # @param [Integer] howmany_rank 
  # @param [Array<unknown>] howmany_dims 
  # @param [FFI::Pointer(*FftwfComplex)] in_ 
  # @param [FFI::Pointer(*Float)] out 
  # @param [Integer] flags 
  # @return [FftwfPlan] 
  # @scope class
  attach_function :fftwf_plan_guru64_dft_c2r, :fftwf_plan_guru64_dft_c2r, [:int, :pointer, :int, :pointer, :pointer, :pointer, :uint], FftwfPlan
  
  # (Not documented)
  # 
  # @method fftwf_plan_guru64_split_dft_r2c(rank, dims, howmany_rank, howmany_dims, in_, ro, io, flags)
  # @param [Integer] rank 
  # @param [Array<unknown>] dims 
  # @param [Integer] howmany_rank 
  # @param [Array<unknown>] howmany_dims 
  # @param [FFI::Pointer(*Float)] in_ 
  # @param [FFI::Pointer(*Float)] ro 
  # @param [FFI::Pointer(*Float)] io 
  # @param [Integer] flags 
  # @return [FftwfPlan] 
  # @scope class
  attach_function :fftwf_plan_guru64_split_dft_r2c, :fftwf_plan_guru64_split_dft_r2c, [:int, :pointer, :int, :pointer, :pointer, :pointer, :pointer, :uint], FftwfPlan
  
  # (Not documented)
  # 
  # @method fftwf_plan_guru64_split_dft_c2r(rank, dims, howmany_rank, howmany_dims, ri, ii, out, flags)
  # @param [Integer] rank 
  # @param [Array<unknown>] dims 
  # @param [Integer] howmany_rank 
  # @param [Array<unknown>] howmany_dims 
  # @param [FFI::Pointer(*Float)] ri 
  # @param [FFI::Pointer(*Float)] ii 
  # @param [FFI::Pointer(*Float)] out 
  # @param [Integer] flags 
  # @return [FftwfPlan] 
  # @scope class
  attach_function :fftwf_plan_guru64_split_dft_c2r, :fftwf_plan_guru64_split_dft_c2r, [:int, :pointer, :int, :pointer, :pointer, :pointer, :pointer, :uint], FftwfPlan
  
  # (Not documented)
  # 
  # @method fftwf_execute_dft_r2c(p, in_, out)
  # @param [Array<FftwfPlan>] p 
  # @param [FFI::Pointer(*Float)] in_ 
  # @param [FFI::Pointer(*FftwfComplex)] out 
  # @return [nil] 
  # @scope class
  attach_function :fftwf_execute_dft_r2c, :fftwf_execute_dft_r2c, [:pointer, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method fftwf_execute_dft_c2r(p, in_, out)
  # @param [Array<FftwfPlan>] p 
  # @param [FFI::Pointer(*FftwfComplex)] in_ 
  # @param [FFI::Pointer(*Float)] out 
  # @return [nil] 
  # @scope class
  attach_function :fftwf_execute_dft_c2r, :fftwf_execute_dft_c2r, [:pointer, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method fftwf_execute_split_dft_r2c(p, in_, ro, io)
  # @param [Array<FftwfPlan>] p 
  # @param [FFI::Pointer(*Float)] in_ 
  # @param [FFI::Pointer(*Float)] ro 
  # @param [FFI::Pointer(*Float)] io 
  # @return [nil] 
  # @scope class
  attach_function :fftwf_execute_split_dft_r2c, :fftwf_execute_split_dft_r2c, [:pointer, :pointer, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method fftwf_execute_split_dft_c2r(p, ri, ii, out)
  # @param [Array<FftwfPlan>] p 
  # @param [FFI::Pointer(*Float)] ri 
  # @param [FFI::Pointer(*Float)] ii 
  # @param [FFI::Pointer(*Float)] out 
  # @return [nil] 
  # @scope class
  attach_function :fftwf_execute_split_dft_c2r, :fftwf_execute_split_dft_c2r, [:pointer, :pointer, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method fftwf_plan_many_r2r(rank, n, howmany, in_, inembed, istride, idist, out, onembed, ostride, odist, kind, flags)
  # @param [Integer] rank 
  # @param [Array<Integer>] n 
  # @param [Integer] howmany 
  # @param [FFI::Pointer(*Float)] in_ 
  # @param [Array<Integer>] inembed 
  # @param [Integer] istride 
  # @param [Integer] idist 
  # @param [FFI::Pointer(*Float)] out 
  # @param [Array<Integer>] onembed 
  # @param [Integer] ostride 
  # @param [Integer] odist 
  # @param [Array<unknown>] kind 
  # @param [Integer] flags 
  # @return [FftwfPlan] 
  # @scope class
  attach_function :fftwf_plan_many_r2r, :fftwf_plan_many_r2r, [:int, :pointer, :int, :pointer, :pointer, :int, :int, :pointer, :pointer, :int, :int, :pointer, :uint], FftwfPlan
  
  # (Not documented)
  # 
  # @method fftwf_plan_r2r(rank, n, in_, out, kind, flags)
  # @param [Integer] rank 
  # @param [Array<Integer>] n 
  # @param [FFI::Pointer(*Float)] in_ 
  # @param [FFI::Pointer(*Float)] out 
  # @param [Array<unknown>] kind 
  # @param [Integer] flags 
  # @return [FftwfPlan] 
  # @scope class
  attach_function :fftwf_plan_r2r, :fftwf_plan_r2r, [:int, :pointer, :pointer, :pointer, :pointer, :uint], FftwfPlan
  
  # (Not documented)
  # 
  # @method fftwf_plan_r2r_1d(n, in_, out, kind, flags)
  # @param [Integer] n 
  # @param [FFI::Pointer(*Float)] in_ 
  # @param [FFI::Pointer(*Float)] out 
  # @param [Symbol from _enum_r2r_kind_] kind 
  # @param [Integer] flags 
  # @return [FftwfPlan] 
  # @scope class
  attach_function :fftwf_plan_r2r_1d, :fftwf_plan_r2r_1d, [:int, :pointer, :pointer, :r2r_kind, :uint], FftwfPlan
  
  # (Not documented)
  # 
  # @method fftwf_plan_r2r_2d(n0, n1, in_, out, kind0, kind1, flags)
  # @param [Integer] n0 
  # @param [Integer] n1 
  # @param [FFI::Pointer(*Float)] in_ 
  # @param [FFI::Pointer(*Float)] out 
  # @param [Symbol from _enum_r2r_kind_] kind0 
  # @param [Symbol from _enum_r2r_kind_] kind1 
  # @param [Integer] flags 
  # @return [FftwfPlan] 
  # @scope class
  attach_function :fftwf_plan_r2r_2d, :fftwf_plan_r2r_2d, [:int, :int, :pointer, :pointer, :r2r_kind, :r2r_kind, :uint], FftwfPlan
  
  # (Not documented)
  # 
  # @method fftwf_plan_r2r_3d(n0, n1, n2, in_, out, kind0, kind1, kind2, flags)
  # @param [Integer] n0 
  # @param [Integer] n1 
  # @param [Integer] n2 
  # @param [FFI::Pointer(*Float)] in_ 
  # @param [FFI::Pointer(*Float)] out 
  # @param [Symbol from _enum_r2r_kind_] kind0 
  # @param [Symbol from _enum_r2r_kind_] kind1 
  # @param [Symbol from _enum_r2r_kind_] kind2 
  # @param [Integer] flags 
  # @return [FftwfPlan] 
  # @scope class
  attach_function :fftwf_plan_r2r_3d, :fftwf_plan_r2r_3d, [:int, :int, :int, :pointer, :pointer, :r2r_kind, :r2r_kind, :r2r_kind, :uint], FftwfPlan
  
  # (Not documented)
  # 
  # @method fftwf_plan_guru_r2r(rank, dims, howmany_rank, howmany_dims, in_, out, kind, flags)
  # @param [Integer] rank 
  # @param [Array<unknown>] dims 
  # @param [Integer] howmany_rank 
  # @param [Array<unknown>] howmany_dims 
  # @param [FFI::Pointer(*Float)] in_ 
  # @param [FFI::Pointer(*Float)] out 
  # @param [Array<unknown>] kind 
  # @param [Integer] flags 
  # @return [FftwfPlan] 
  # @scope class
  attach_function :fftwf_plan_guru_r2r, :fftwf_plan_guru_r2r, [:int, :pointer, :int, :pointer, :pointer, :pointer, :pointer, :uint], FftwfPlan
  
  # (Not documented)
  # 
  # @method fftwf_plan_guru64_r2r(rank, dims, howmany_rank, howmany_dims, in_, out, kind, flags)
  # @param [Integer] rank 
  # @param [Array<unknown>] dims 
  # @param [Integer] howmany_rank 
  # @param [Array<unknown>] howmany_dims 
  # @param [FFI::Pointer(*Float)] in_ 
  # @param [FFI::Pointer(*Float)] out 
  # @param [Array<unknown>] kind 
  # @param [Integer] flags 
  # @return [FftwfPlan] 
  # @scope class
  attach_function :fftwf_plan_guru64_r2r, :fftwf_plan_guru64_r2r, [:int, :pointer, :int, :pointer, :pointer, :pointer, :pointer, :uint], FftwfPlan
  
  # (Not documented)
  # 
  # @method fftwf_execute_r2r(p, in_, out)
  # @param [Array<FftwfPlan>] p 
  # @param [FFI::Pointer(*Float)] in_ 
  # @param [FFI::Pointer(*Float)] out 
  # @return [nil] 
  # @scope class
  attach_function :fftwf_execute_r2r, :fftwf_execute_r2r, [:pointer, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method fftwf_destroy_plan(p)
  # @param [FftwfPlan] p 
  # @return [nil] 
  # @scope class
  attach_function :fftwf_destroy_plan, :fftwf_destroy_plan, [FftwfPlan], :void
  
  # (Not documented)
  # 
  # @method fftwf_forget_wisdom()
  # @return [nil] 
  # @scope class
  attach_function :fftwf_forget_wisdom, :fftwf_forget_wisdom, [], :void
  
  # (Not documented)
  # 
  # @method fftwf_cleanup()
  # @return [nil] 
  # @scope class
  attach_function :fftwf_cleanup, :fftwf_cleanup, [], :void
  
  # (Not documented)
  # 
  # @method fftwf_set_timelimit(t)
  # @param [Float] t 
  # @return [nil] 
  # @scope class
  attach_function :fftwf_set_timelimit, :fftwf_set_timelimit, [:double], :void
  
  # (Not documented)
  # 
  # @method fftwf_plan_with_nthreads(nthreads)
  # @param [Integer] nthreads 
  # @return [nil] 
  # @scope class
  attach_function :fftwf_plan_with_nthreads, :fftwf_plan_with_nthreads, [:int], :void
  
  # (Not documented)
  # 
  # @method fftwf_init_threads()
  # @return [Integer] 
  # @scope class
  attach_function :fftwf_init_threads, :fftwf_init_threads, [], :int
  
  # (Not documented)
  # 
  # @method fftwf_cleanup_threads()
  # @return [nil] 
  # @scope class
  attach_function :fftwf_cleanup_threads, :fftwf_cleanup_threads, [], :void
  
  # (Not documented)
  # 
  # @method fftwf_export_wisdom_to_filename(filename)
  # @param [Array<Integer>] filename 
  # @return [Integer] 
  # @scope class
  attach_function :fftwf_export_wisdom_to_filename, :fftwf_export_wisdom_to_filename, [:pointer], :int
  
  # (Not documented)
  # 
  # @method fftwf_export_wisdom_to_file(output_file)
  # @param [Array<unknown>] output_file 
  # @return [nil] 
  # @scope class
  attach_function :fftwf_export_wisdom_to_file, :fftwf_export_wisdom_to_file, [:pointer], :void
  
  # (Not documented)
  # 
  # @method fftwf_export_wisdom_to_string()
  # @return [String] 
  # @scope class
  attach_function :fftwf_export_wisdom_to_string, :fftwf_export_wisdom_to_string, [], :string
  
  # (Not documented)
  # 
  # @method fftwf_export_wisdom(write_char, data)
  # @param [FFI::Pointer(FftwfWriteCharFunc)] write_char 
  # @param [Array<nil>] data 
  # @return [nil] 
  # @scope class
  attach_function :fftwf_export_wisdom, :fftwf_export_wisdom, [:pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method fftwf_import_system_wisdom()
  # @return [Integer] 
  # @scope class
  attach_function :fftwf_import_system_wisdom, :fftwf_import_system_wisdom, [], :int
  
  # (Not documented)
  # 
  # @method fftwf_import_wisdom_from_filename(filename)
  # @param [Array<Integer>] filename 
  # @return [Integer] 
  # @scope class
  attach_function :fftwf_import_wisdom_from_filename, :fftwf_import_wisdom_from_filename, [:pointer], :int
  
  # (Not documented)
  # 
  # @method fftwf_import_wisdom_from_file(input_file)
  # @param [Array<unknown>] input_file 
  # @return [Integer] 
  # @scope class
  attach_function :fftwf_import_wisdom_from_file, :fftwf_import_wisdom_from_file, [:pointer], :int
  
  # (Not documented)
  # 
  # @method fftwf_import_wisdom_from_string(input_string)
  # @param [Array<Integer>] input_string 
  # @return [Integer] 
  # @scope class
  attach_function :fftwf_import_wisdom_from_string, :fftwf_import_wisdom_from_string, [:pointer], :int
  
  # (Not documented)
  # 
  # @method fftwf_import_wisdom(read_char, data)
  # @param [FFI::Pointer(FftwfReadCharFunc)] read_char 
  # @param [Array<nil>] data 
  # @return [Integer] 
  # @scope class
  attach_function :fftwf_import_wisdom, :fftwf_import_wisdom, [:pointer, :pointer], :int
  
  # (Not documented)
  # 
  # @method fftwf_fprint_plan(p, output_file)
  # @param [Array<FftwfPlan>] p 
  # @param [Array<unknown>] output_file 
  # @return [nil] 
  # @scope class
  attach_function :fftwf_fprint_plan, :fftwf_fprint_plan, [:pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method fftwf_print_plan(p)
  # @param [Array<FftwfPlan>] p 
  # @return [nil] 
  # @scope class
  attach_function :fftwf_print_plan, :fftwf_print_plan, [:pointer], :void
  
  # (Not documented)
  # 
  # @method fftwf_sprint_plan(p)
  # @param [Array<FftwfPlan>] p 
  # @return [String] 
  # @scope class
  attach_function :fftwf_sprint_plan, :fftwf_sprint_plan, [:pointer], :string
  
  # (Not documented)
  # 
  # @method fftwf_malloc(n)
  # @param [Integer] n 
  # @return [FFI::Pointer(*Void)] 
  # @scope class
  attach_function :fftwf_malloc, :fftwf_malloc, [:ulong], :pointer
  
  # (Not documented)
  # 
  # @method fftwf_alloc_real(n)
  # @param [Integer] n 
  # @return [FFI::Pointer(*Float)] 
  # @scope class
  attach_function :fftwf_alloc_real, :fftwf_alloc_real, [:ulong], :pointer
  
  # (Not documented)
  # 
  # @method fftwf_alloc_complex(n)
  # @param [Integer] n 
  # @return [FFI::Pointer(*FftwfComplex)] 
  # @scope class
  attach_function :fftwf_alloc_complex, :fftwf_alloc_complex, [:ulong], :pointer
  
  # (Not documented)
  # 
  # @method fftwf_free(p)
  # @param [Array<nil>] p 
  # @return [nil] 
  # @scope class
  attach_function :fftwf_free, :fftwf_free, [:pointer], :void
  
  # (Not documented)
  # 
  # @method fftwf_flops(p, add, mul, fmas)
  # @param [Array<FftwfPlan>] p 
  # @param [Array<Float>] add 
  # @param [Array<Float>] mul 
  # @param [Array<Float>] fmas 
  # @return [nil] 
  # @scope class
  attach_function :fftwf_flops, :fftwf_flops, [:pointer, :pointer, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method fftwf_estimate_cost(p)
  # @param [Array<FftwfPlan>] p 
  # @return [Float] 
  # @scope class
  attach_function :fftwf_estimate_cost, :fftwf_estimate_cost, [:pointer], :double
  
  # (Not documented)
  # 
  # @method fftwf_cost(p)
  # @param [Array<FftwfPlan>] p 
  # @return [Float] 
  # @scope class
  attach_function :fftwf_cost, :fftwf_cost, [:pointer], :double
  
  # (Not documented)
  # 
  # @method fftwf_alignment_of(p)
  # @param [FFI::Pointer(*Float)] p 
  # @return [Integer] 
  # @scope class
  attach_function :fftwf_alignment_of, :fftwf_alignment_of, [:pointer], :int
  
  # (Not documented)
  class FftwlPlan < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # @method fftwl_execute(p)
  # @param [Array<FftwlPlan>] p 
  # @return [nil] 
  # @scope class
  attach_function :fftwl_execute, :fftwl_execute, [:pointer], :void
  
  # (Not documented)
  # 
  # @method fftwl_plan_dft(rank, n, in_, out, sign, flags)
  # @param [Integer] rank 
  # @param [Array<Integer>] n 
  # @param [FFI::Pointer(*FftwlComplex)] in_ 
  # @param [FFI::Pointer(*FftwlComplex)] out 
  # @param [Integer] sign 
  # @param [Integer] flags 
  # @return [FftwlPlan] 
  # @scope class
  attach_function :fftwl_plan_dft, :fftwl_plan_dft, [:int, :pointer, :pointer, :pointer, :int, :uint], FftwlPlan
  
  # (Not documented)
  # 
  # @method fftwl_plan_dft_1d(n, in_, out, sign, flags)
  # @param [Integer] n 
  # @param [FFI::Pointer(*FftwlComplex)] in_ 
  # @param [FFI::Pointer(*FftwlComplex)] out 
  # @param [Integer] sign 
  # @param [Integer] flags 
  # @return [FftwlPlan] 
  # @scope class
  attach_function :fftwl_plan_dft_1d, :fftwl_plan_dft_1d, [:int, :pointer, :pointer, :int, :uint], FftwlPlan
  
  # (Not documented)
  # 
  # @method fftwl_plan_dft_2d(n0, n1, in_, out, sign, flags)
  # @param [Integer] n0 
  # @param [Integer] n1 
  # @param [FFI::Pointer(*FftwlComplex)] in_ 
  # @param [FFI::Pointer(*FftwlComplex)] out 
  # @param [Integer] sign 
  # @param [Integer] flags 
  # @return [FftwlPlan] 
  # @scope class
  attach_function :fftwl_plan_dft_2d, :fftwl_plan_dft_2d, [:int, :int, :pointer, :pointer, :int, :uint], FftwlPlan
  
  # (Not documented)
  # 
  # @method fftwl_plan_dft_3d(n0, n1, n2, in_, out, sign, flags)
  # @param [Integer] n0 
  # @param [Integer] n1 
  # @param [Integer] n2 
  # @param [FFI::Pointer(*FftwlComplex)] in_ 
  # @param [FFI::Pointer(*FftwlComplex)] out 
  # @param [Integer] sign 
  # @param [Integer] flags 
  # @return [FftwlPlan] 
  # @scope class
  attach_function :fftwl_plan_dft_3d, :fftwl_plan_dft_3d, [:int, :int, :int, :pointer, :pointer, :int, :uint], FftwlPlan
  
  # (Not documented)
  # 
  # @method fftwl_plan_many_dft(rank, n, howmany, in_, inembed, istride, idist, out, onembed, ostride, odist, sign, flags)
  # @param [Integer] rank 
  # @param [Array<Integer>] n 
  # @param [Integer] howmany 
  # @param [FFI::Pointer(*FftwlComplex)] in_ 
  # @param [Array<Integer>] inembed 
  # @param [Integer] istride 
  # @param [Integer] idist 
  # @param [FFI::Pointer(*FftwlComplex)] out 
  # @param [Array<Integer>] onembed 
  # @param [Integer] ostride 
  # @param [Integer] odist 
  # @param [Integer] sign 
  # @param [Integer] flags 
  # @return [FftwlPlan] 
  # @scope class
  attach_function :fftwl_plan_many_dft, :fftwl_plan_many_dft, [:int, :pointer, :int, :pointer, :pointer, :int, :int, :pointer, :pointer, :int, :int, :int, :uint], FftwlPlan
  
  # (Not documented)
  # 
  # @method fftwl_plan_guru_dft(rank, dims, howmany_rank, howmany_dims, in_, out, sign, flags)
  # @param [Integer] rank 
  # @param [Array<unknown>] dims 
  # @param [Integer] howmany_rank 
  # @param [Array<unknown>] howmany_dims 
  # @param [FFI::Pointer(*FftwlComplex)] in_ 
  # @param [FFI::Pointer(*FftwlComplex)] out 
  # @param [Integer] sign 
  # @param [Integer] flags 
  # @return [FftwlPlan] 
  # @scope class
  attach_function :fftwl_plan_guru_dft, :fftwl_plan_guru_dft, [:int, :pointer, :int, :pointer, :pointer, :pointer, :int, :uint], FftwlPlan
  
  # (Not documented)
  # 
  # @method fftwl_plan_guru_split_dft(rank, dims, howmany_rank, howmany_dims, ri, ii, ro, io, flags)
  # @param [Integer] rank 
  # @param [Array<unknown>] dims 
  # @param [Integer] howmany_rank 
  # @param [Array<unknown>] howmany_dims 
  # @param [FFI::Pointer(*LongDouble)] ri 
  # @param [FFI::Pointer(*LongDouble)] ii 
  # @param [FFI::Pointer(*LongDouble)] ro 
  # @param [FFI::Pointer(*LongDouble)] io 
  # @param [Integer] flags 
  # @return [FftwlPlan] 
  # @scope class
  attach_function :fftwl_plan_guru_split_dft, :fftwl_plan_guru_split_dft, [:int, :pointer, :int, :pointer, :pointer, :pointer, :pointer, :pointer, :uint], FftwlPlan
  
  # (Not documented)
  # 
  # @method fftwl_plan_guru64_dft(rank, dims, howmany_rank, howmany_dims, in_, out, sign, flags)
  # @param [Integer] rank 
  # @param [Array<unknown>] dims 
  # @param [Integer] howmany_rank 
  # @param [Array<unknown>] howmany_dims 
  # @param [FFI::Pointer(*FftwlComplex)] in_ 
  # @param [FFI::Pointer(*FftwlComplex)] out 
  # @param [Integer] sign 
  # @param [Integer] flags 
  # @return [FftwlPlan] 
  # @scope class
  attach_function :fftwl_plan_guru64_dft, :fftwl_plan_guru64_dft, [:int, :pointer, :int, :pointer, :pointer, :pointer, :int, :uint], FftwlPlan
  
  # (Not documented)
  # 
  # @method fftwl_plan_guru64_split_dft(rank, dims, howmany_rank, howmany_dims, ri, ii, ro, io, flags)
  # @param [Integer] rank 
  # @param [Array<unknown>] dims 
  # @param [Integer] howmany_rank 
  # @param [Array<unknown>] howmany_dims 
  # @param [FFI::Pointer(*LongDouble)] ri 
  # @param [FFI::Pointer(*LongDouble)] ii 
  # @param [FFI::Pointer(*LongDouble)] ro 
  # @param [FFI::Pointer(*LongDouble)] io 
  # @param [Integer] flags 
  # @return [FftwlPlan] 
  # @scope class
  attach_function :fftwl_plan_guru64_split_dft, :fftwl_plan_guru64_split_dft, [:int, :pointer, :int, :pointer, :pointer, :pointer, :pointer, :pointer, :uint], FftwlPlan
  
  # (Not documented)
  # 
  # @method fftwl_execute_dft(p, in_, out)
  # @param [Array<FftwlPlan>] p 
  # @param [FFI::Pointer(*FftwlComplex)] in_ 
  # @param [FFI::Pointer(*FftwlComplex)] out 
  # @return [nil] 
  # @scope class
  attach_function :fftwl_execute_dft, :fftwl_execute_dft, [:pointer, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method fftwl_execute_split_dft(p, ri, ii, ro, io)
  # @param [Array<FftwlPlan>] p 
  # @param [FFI::Pointer(*LongDouble)] ri 
  # @param [FFI::Pointer(*LongDouble)] ii 
  # @param [FFI::Pointer(*LongDouble)] ro 
  # @param [FFI::Pointer(*LongDouble)] io 
  # @return [nil] 
  # @scope class
  attach_function :fftwl_execute_split_dft, :fftwl_execute_split_dft, [:pointer, :pointer, :pointer, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method fftwl_plan_many_dft_r2c(rank, n, howmany, in_, inembed, istride, idist, out, onembed, ostride, odist, flags)
  # @param [Integer] rank 
  # @param [Array<Integer>] n 
  # @param [Integer] howmany 
  # @param [FFI::Pointer(*LongDouble)] in_ 
  # @param [Array<Integer>] inembed 
  # @param [Integer] istride 
  # @param [Integer] idist 
  # @param [FFI::Pointer(*FftwlComplex)] out 
  # @param [Array<Integer>] onembed 
  # @param [Integer] ostride 
  # @param [Integer] odist 
  # @param [Integer] flags 
  # @return [FftwlPlan] 
  # @scope class
  attach_function :fftwl_plan_many_dft_r2c, :fftwl_plan_many_dft_r2c, [:int, :pointer, :int, :pointer, :pointer, :int, :int, :pointer, :pointer, :int, :int, :uint], FftwlPlan
  
  # (Not documented)
  # 
  # @method fftwl_plan_dft_r2c(rank, n, in_, out, flags)
  # @param [Integer] rank 
  # @param [Array<Integer>] n 
  # @param [FFI::Pointer(*LongDouble)] in_ 
  # @param [FFI::Pointer(*FftwlComplex)] out 
  # @param [Integer] flags 
  # @return [FftwlPlan] 
  # @scope class
  attach_function :fftwl_plan_dft_r2c, :fftwl_plan_dft_r2c, [:int, :pointer, :pointer, :pointer, :uint], FftwlPlan
  
  # (Not documented)
  # 
  # @method fftwl_plan_dft_r2c_1d(n, in_, out, flags)
  # @param [Integer] n 
  # @param [FFI::Pointer(*LongDouble)] in_ 
  # @param [FFI::Pointer(*FftwlComplex)] out 
  # @param [Integer] flags 
  # @return [FftwlPlan] 
  # @scope class
  attach_function :fftwl_plan_dft_r2c_1d, :fftwl_plan_dft_r2c_1d, [:int, :pointer, :pointer, :uint], FftwlPlan
  
  # (Not documented)
  # 
  # @method fftwl_plan_dft_r2c_2d(n0, n1, in_, out, flags)
  # @param [Integer] n0 
  # @param [Integer] n1 
  # @param [FFI::Pointer(*LongDouble)] in_ 
  # @param [FFI::Pointer(*FftwlComplex)] out 
  # @param [Integer] flags 
  # @return [FftwlPlan] 
  # @scope class
  attach_function :fftwl_plan_dft_r2c_2d, :fftwl_plan_dft_r2c_2d, [:int, :int, :pointer, :pointer, :uint], FftwlPlan
  
  # (Not documented)
  # 
  # @method fftwl_plan_dft_r2c_3d(n0, n1, n2, in_, out, flags)
  # @param [Integer] n0 
  # @param [Integer] n1 
  # @param [Integer] n2 
  # @param [FFI::Pointer(*LongDouble)] in_ 
  # @param [FFI::Pointer(*FftwlComplex)] out 
  # @param [Integer] flags 
  # @return [FftwlPlan] 
  # @scope class
  attach_function :fftwl_plan_dft_r2c_3d, :fftwl_plan_dft_r2c_3d, [:int, :int, :int, :pointer, :pointer, :uint], FftwlPlan
  
  # (Not documented)
  # 
  # @method fftwl_plan_many_dft_c2r(rank, n, howmany, in_, inembed, istride, idist, out, onembed, ostride, odist, flags)
  # @param [Integer] rank 
  # @param [Array<Integer>] n 
  # @param [Integer] howmany 
  # @param [FFI::Pointer(*FftwlComplex)] in_ 
  # @param [Array<Integer>] inembed 
  # @param [Integer] istride 
  # @param [Integer] idist 
  # @param [FFI::Pointer(*LongDouble)] out 
  # @param [Array<Integer>] onembed 
  # @param [Integer] ostride 
  # @param [Integer] odist 
  # @param [Integer] flags 
  # @return [FftwlPlan] 
  # @scope class
  attach_function :fftwl_plan_many_dft_c2r, :fftwl_plan_many_dft_c2r, [:int, :pointer, :int, :pointer, :pointer, :int, :int, :pointer, :pointer, :int, :int, :uint], FftwlPlan
  
  # (Not documented)
  # 
  # @method fftwl_plan_dft_c2r(rank, n, in_, out, flags)
  # @param [Integer] rank 
  # @param [Array<Integer>] n 
  # @param [FFI::Pointer(*FftwlComplex)] in_ 
  # @param [FFI::Pointer(*LongDouble)] out 
  # @param [Integer] flags 
  # @return [FftwlPlan] 
  # @scope class
  attach_function :fftwl_plan_dft_c2r, :fftwl_plan_dft_c2r, [:int, :pointer, :pointer, :pointer, :uint], FftwlPlan
  
  # (Not documented)
  # 
  # @method fftwl_plan_dft_c2r_1d(n, in_, out, flags)
  # @param [Integer] n 
  # @param [FFI::Pointer(*FftwlComplex)] in_ 
  # @param [FFI::Pointer(*LongDouble)] out 
  # @param [Integer] flags 
  # @return [FftwlPlan] 
  # @scope class
  attach_function :fftwl_plan_dft_c2r_1d, :fftwl_plan_dft_c2r_1d, [:int, :pointer, :pointer, :uint], FftwlPlan
  
  # (Not documented)
  # 
  # @method fftwl_plan_dft_c2r_2d(n0, n1, in_, out, flags)
  # @param [Integer] n0 
  # @param [Integer] n1 
  # @param [FFI::Pointer(*FftwlComplex)] in_ 
  # @param [FFI::Pointer(*LongDouble)] out 
  # @param [Integer] flags 
  # @return [FftwlPlan] 
  # @scope class
  attach_function :fftwl_plan_dft_c2r_2d, :fftwl_plan_dft_c2r_2d, [:int, :int, :pointer, :pointer, :uint], FftwlPlan
  
  # (Not documented)
  # 
  # @method fftwl_plan_dft_c2r_3d(n0, n1, n2, in_, out, flags)
  # @param [Integer] n0 
  # @param [Integer] n1 
  # @param [Integer] n2 
  # @param [FFI::Pointer(*FftwlComplex)] in_ 
  # @param [FFI::Pointer(*LongDouble)] out 
  # @param [Integer] flags 
  # @return [FftwlPlan] 
  # @scope class
  attach_function :fftwl_plan_dft_c2r_3d, :fftwl_plan_dft_c2r_3d, [:int, :int, :int, :pointer, :pointer, :uint], FftwlPlan
  
  # (Not documented)
  # 
  # @method fftwl_plan_guru_dft_r2c(rank, dims, howmany_rank, howmany_dims, in_, out, flags)
  # @param [Integer] rank 
  # @param [Array<unknown>] dims 
  # @param [Integer] howmany_rank 
  # @param [Array<unknown>] howmany_dims 
  # @param [FFI::Pointer(*LongDouble)] in_ 
  # @param [FFI::Pointer(*FftwlComplex)] out 
  # @param [Integer] flags 
  # @return [FftwlPlan] 
  # @scope class
  attach_function :fftwl_plan_guru_dft_r2c, :fftwl_plan_guru_dft_r2c, [:int, :pointer, :int, :pointer, :pointer, :pointer, :uint], FftwlPlan
  
  # (Not documented)
  # 
  # @method fftwl_plan_guru_dft_c2r(rank, dims, howmany_rank, howmany_dims, in_, out, flags)
  # @param [Integer] rank 
  # @param [Array<unknown>] dims 
  # @param [Integer] howmany_rank 
  # @param [Array<unknown>] howmany_dims 
  # @param [FFI::Pointer(*FftwlComplex)] in_ 
  # @param [FFI::Pointer(*LongDouble)] out 
  # @param [Integer] flags 
  # @return [FftwlPlan] 
  # @scope class
  attach_function :fftwl_plan_guru_dft_c2r, :fftwl_plan_guru_dft_c2r, [:int, :pointer, :int, :pointer, :pointer, :pointer, :uint], FftwlPlan
  
  # (Not documented)
  # 
  # @method fftwl_plan_guru_split_dft_r2c(rank, dims, howmany_rank, howmany_dims, in_, ro, io, flags)
  # @param [Integer] rank 
  # @param [Array<unknown>] dims 
  # @param [Integer] howmany_rank 
  # @param [Array<unknown>] howmany_dims 
  # @param [FFI::Pointer(*LongDouble)] in_ 
  # @param [FFI::Pointer(*LongDouble)] ro 
  # @param [FFI::Pointer(*LongDouble)] io 
  # @param [Integer] flags 
  # @return [FftwlPlan] 
  # @scope class
  attach_function :fftwl_plan_guru_split_dft_r2c, :fftwl_plan_guru_split_dft_r2c, [:int, :pointer, :int, :pointer, :pointer, :pointer, :pointer, :uint], FftwlPlan
  
  # (Not documented)
  # 
  # @method fftwl_plan_guru_split_dft_c2r(rank, dims, howmany_rank, howmany_dims, ri, ii, out, flags)
  # @param [Integer] rank 
  # @param [Array<unknown>] dims 
  # @param [Integer] howmany_rank 
  # @param [Array<unknown>] howmany_dims 
  # @param [FFI::Pointer(*LongDouble)] ri 
  # @param [FFI::Pointer(*LongDouble)] ii 
  # @param [FFI::Pointer(*LongDouble)] out 
  # @param [Integer] flags 
  # @return [FftwlPlan] 
  # @scope class
  attach_function :fftwl_plan_guru_split_dft_c2r, :fftwl_plan_guru_split_dft_c2r, [:int, :pointer, :int, :pointer, :pointer, :pointer, :pointer, :uint], FftwlPlan
  
  # (Not documented)
  # 
  # @method fftwl_plan_guru64_dft_r2c(rank, dims, howmany_rank, howmany_dims, in_, out, flags)
  # @param [Integer] rank 
  # @param [Array<unknown>] dims 
  # @param [Integer] howmany_rank 
  # @param [Array<unknown>] howmany_dims 
  # @param [FFI::Pointer(*LongDouble)] in_ 
  # @param [FFI::Pointer(*FftwlComplex)] out 
  # @param [Integer] flags 
  # @return [FftwlPlan] 
  # @scope class
  attach_function :fftwl_plan_guru64_dft_r2c, :fftwl_plan_guru64_dft_r2c, [:int, :pointer, :int, :pointer, :pointer, :pointer, :uint], FftwlPlan
  
  # (Not documented)
  # 
  # @method fftwl_plan_guru64_dft_c2r(rank, dims, howmany_rank, howmany_dims, in_, out, flags)
  # @param [Integer] rank 
  # @param [Array<unknown>] dims 
  # @param [Integer] howmany_rank 
  # @param [Array<unknown>] howmany_dims 
  # @param [FFI::Pointer(*FftwlComplex)] in_ 
  # @param [FFI::Pointer(*LongDouble)] out 
  # @param [Integer] flags 
  # @return [FftwlPlan] 
  # @scope class
  attach_function :fftwl_plan_guru64_dft_c2r, :fftwl_plan_guru64_dft_c2r, [:int, :pointer, :int, :pointer, :pointer, :pointer, :uint], FftwlPlan
  
  # (Not documented)
  # 
  # @method fftwl_plan_guru64_split_dft_r2c(rank, dims, howmany_rank, howmany_dims, in_, ro, io, flags)
  # @param [Integer] rank 
  # @param [Array<unknown>] dims 
  # @param [Integer] howmany_rank 
  # @param [Array<unknown>] howmany_dims 
  # @param [FFI::Pointer(*LongDouble)] in_ 
  # @param [FFI::Pointer(*LongDouble)] ro 
  # @param [FFI::Pointer(*LongDouble)] io 
  # @param [Integer] flags 
  # @return [FftwlPlan] 
  # @scope class
  attach_function :fftwl_plan_guru64_split_dft_r2c, :fftwl_plan_guru64_split_dft_r2c, [:int, :pointer, :int, :pointer, :pointer, :pointer, :pointer, :uint], FftwlPlan
  
  # (Not documented)
  # 
  # @method fftwl_plan_guru64_split_dft_c2r(rank, dims, howmany_rank, howmany_dims, ri, ii, out, flags)
  # @param [Integer] rank 
  # @param [Array<unknown>] dims 
  # @param [Integer] howmany_rank 
  # @param [Array<unknown>] howmany_dims 
  # @param [FFI::Pointer(*LongDouble)] ri 
  # @param [FFI::Pointer(*LongDouble)] ii 
  # @param [FFI::Pointer(*LongDouble)] out 
  # @param [Integer] flags 
  # @return [FftwlPlan] 
  # @scope class
  attach_function :fftwl_plan_guru64_split_dft_c2r, :fftwl_plan_guru64_split_dft_c2r, [:int, :pointer, :int, :pointer, :pointer, :pointer, :pointer, :uint], FftwlPlan
  
  # (Not documented)
  # 
  # @method fftwl_execute_dft_r2c(p, in_, out)
  # @param [Array<FftwlPlan>] p 
  # @param [FFI::Pointer(*LongDouble)] in_ 
  # @param [FFI::Pointer(*FftwlComplex)] out 
  # @return [nil] 
  # @scope class
  attach_function :fftwl_execute_dft_r2c, :fftwl_execute_dft_r2c, [:pointer, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method fftwl_execute_dft_c2r(p, in_, out)
  # @param [Array<FftwlPlan>] p 
  # @param [FFI::Pointer(*FftwlComplex)] in_ 
  # @param [FFI::Pointer(*LongDouble)] out 
  # @return [nil] 
  # @scope class
  attach_function :fftwl_execute_dft_c2r, :fftwl_execute_dft_c2r, [:pointer, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method fftwl_execute_split_dft_r2c(p, in_, ro, io)
  # @param [Array<FftwlPlan>] p 
  # @param [FFI::Pointer(*LongDouble)] in_ 
  # @param [FFI::Pointer(*LongDouble)] ro 
  # @param [FFI::Pointer(*LongDouble)] io 
  # @return [nil] 
  # @scope class
  attach_function :fftwl_execute_split_dft_r2c, :fftwl_execute_split_dft_r2c, [:pointer, :pointer, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method fftwl_execute_split_dft_c2r(p, ri, ii, out)
  # @param [Array<FftwlPlan>] p 
  # @param [FFI::Pointer(*LongDouble)] ri 
  # @param [FFI::Pointer(*LongDouble)] ii 
  # @param [FFI::Pointer(*LongDouble)] out 
  # @return [nil] 
  # @scope class
  attach_function :fftwl_execute_split_dft_c2r, :fftwl_execute_split_dft_c2r, [:pointer, :pointer, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method fftwl_plan_many_r2r(rank, n, howmany, in_, inembed, istride, idist, out, onembed, ostride, odist, kind, flags)
  # @param [Integer] rank 
  # @param [Array<Integer>] n 
  # @param [Integer] howmany 
  # @param [FFI::Pointer(*LongDouble)] in_ 
  # @param [Array<Integer>] inembed 
  # @param [Integer] istride 
  # @param [Integer] idist 
  # @param [FFI::Pointer(*LongDouble)] out 
  # @param [Array<Integer>] onembed 
  # @param [Integer] ostride 
  # @param [Integer] odist 
  # @param [Array<unknown>] kind 
  # @param [Integer] flags 
  # @return [FftwlPlan] 
  # @scope class
  attach_function :fftwl_plan_many_r2r, :fftwl_plan_many_r2r, [:int, :pointer, :int, :pointer, :pointer, :int, :int, :pointer, :pointer, :int, :int, :pointer, :uint], FftwlPlan
  
  # (Not documented)
  # 
  # @method fftwl_plan_r2r(rank, n, in_, out, kind, flags)
  # @param [Integer] rank 
  # @param [Array<Integer>] n 
  # @param [FFI::Pointer(*LongDouble)] in_ 
  # @param [FFI::Pointer(*LongDouble)] out 
  # @param [Array<unknown>] kind 
  # @param [Integer] flags 
  # @return [FftwlPlan] 
  # @scope class
  attach_function :fftwl_plan_r2r, :fftwl_plan_r2r, [:int, :pointer, :pointer, :pointer, :pointer, :uint], FftwlPlan
  
  # (Not documented)
  # 
  # @method fftwl_plan_r2r_1d(n, in_, out, kind, flags)
  # @param [Integer] n 
  # @param [FFI::Pointer(*LongDouble)] in_ 
  # @param [FFI::Pointer(*LongDouble)] out 
  # @param [Symbol from _enum_r2r_kind_] kind 
  # @param [Integer] flags 
  # @return [FftwlPlan] 
  # @scope class
  attach_function :fftwl_plan_r2r_1d, :fftwl_plan_r2r_1d, [:int, :pointer, :pointer, :r2r_kind, :uint], FftwlPlan
  
  # (Not documented)
  # 
  # @method fftwl_plan_r2r_2d(n0, n1, in_, out, kind0, kind1, flags)
  # @param [Integer] n0 
  # @param [Integer] n1 
  # @param [FFI::Pointer(*LongDouble)] in_ 
  # @param [FFI::Pointer(*LongDouble)] out 
  # @param [Symbol from _enum_r2r_kind_] kind0 
  # @param [Symbol from _enum_r2r_kind_] kind1 
  # @param [Integer] flags 
  # @return [FftwlPlan] 
  # @scope class
  attach_function :fftwl_plan_r2r_2d, :fftwl_plan_r2r_2d, [:int, :int, :pointer, :pointer, :r2r_kind, :r2r_kind, :uint], FftwlPlan
  
  # (Not documented)
  # 
  # @method fftwl_plan_r2r_3d(n0, n1, n2, in_, out, kind0, kind1, kind2, flags)
  # @param [Integer] n0 
  # @param [Integer] n1 
  # @param [Integer] n2 
  # @param [FFI::Pointer(*LongDouble)] in_ 
  # @param [FFI::Pointer(*LongDouble)] out 
  # @param [Symbol from _enum_r2r_kind_] kind0 
  # @param [Symbol from _enum_r2r_kind_] kind1 
  # @param [Symbol from _enum_r2r_kind_] kind2 
  # @param [Integer] flags 
  # @return [FftwlPlan] 
  # @scope class
  attach_function :fftwl_plan_r2r_3d, :fftwl_plan_r2r_3d, [:int, :int, :int, :pointer, :pointer, :r2r_kind, :r2r_kind, :r2r_kind, :uint], FftwlPlan
  
  # (Not documented)
  # 
  # @method fftwl_plan_guru_r2r(rank, dims, howmany_rank, howmany_dims, in_, out, kind, flags)
  # @param [Integer] rank 
  # @param [Array<unknown>] dims 
  # @param [Integer] howmany_rank 
  # @param [Array<unknown>] howmany_dims 
  # @param [FFI::Pointer(*LongDouble)] in_ 
  # @param [FFI::Pointer(*LongDouble)] out 
  # @param [Array<unknown>] kind 
  # @param [Integer] flags 
  # @return [FftwlPlan] 
  # @scope class
  attach_function :fftwl_plan_guru_r2r, :fftwl_plan_guru_r2r, [:int, :pointer, :int, :pointer, :pointer, :pointer, :pointer, :uint], FftwlPlan
  
  # (Not documented)
  # 
  # @method fftwl_plan_guru64_r2r(rank, dims, howmany_rank, howmany_dims, in_, out, kind, flags)
  # @param [Integer] rank 
  # @param [Array<unknown>] dims 
  # @param [Integer] howmany_rank 
  # @param [Array<unknown>] howmany_dims 
  # @param [FFI::Pointer(*LongDouble)] in_ 
  # @param [FFI::Pointer(*LongDouble)] out 
  # @param [Array<unknown>] kind 
  # @param [Integer] flags 
  # @return [FftwlPlan] 
  # @scope class
  attach_function :fftwl_plan_guru64_r2r, :fftwl_plan_guru64_r2r, [:int, :pointer, :int, :pointer, :pointer, :pointer, :pointer, :uint], FftwlPlan
  
  # (Not documented)
  # 
  # @method fftwl_execute_r2r(p, in_, out)
  # @param [Array<FftwlPlan>] p 
  # @param [FFI::Pointer(*LongDouble)] in_ 
  # @param [FFI::Pointer(*LongDouble)] out 
  # @return [nil] 
  # @scope class
  attach_function :fftwl_execute_r2r, :fftwl_execute_r2r, [:pointer, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method fftwl_destroy_plan(p)
  # @param [FftwlPlan] p 
  # @return [nil] 
  # @scope class
  attach_function :fftwl_destroy_plan, :fftwl_destroy_plan, [FftwlPlan], :void
  
  # (Not documented)
  # 
  # @method fftwl_forget_wisdom()
  # @return [nil] 
  # @scope class
  attach_function :fftwl_forget_wisdom, :fftwl_forget_wisdom, [], :void
  
  # (Not documented)
  # 
  # @method fftwl_cleanup()
  # @return [nil] 
  # @scope class
  attach_function :fftwl_cleanup, :fftwl_cleanup, [], :void
  
  # (Not documented)
  # 
  # @method fftwl_set_timelimit(t)
  # @param [Float] t 
  # @return [nil] 
  # @scope class
  attach_function :fftwl_set_timelimit, :fftwl_set_timelimit, [:double], :void
  
  # (Not documented)
  # 
  # @method fftwl_plan_with_nthreads(nthreads)
  # @param [Integer] nthreads 
  # @return [nil] 
  # @scope class
  attach_function :fftwl_plan_with_nthreads, :fftwl_plan_with_nthreads, [:int], :void
  
  # (Not documented)
  # 
  # @method fftwl_init_threads()
  # @return [Integer] 
  # @scope class
  attach_function :fftwl_init_threads, :fftwl_init_threads, [], :int
  
  # (Not documented)
  # 
  # @method fftwl_cleanup_threads()
  # @return [nil] 
  # @scope class
  attach_function :fftwl_cleanup_threads, :fftwl_cleanup_threads, [], :void
  
  # (Not documented)
  # 
  # @method fftwl_export_wisdom_to_filename(filename)
  # @param [Array<Integer>] filename 
  # @return [Integer] 
  # @scope class
  attach_function :fftwl_export_wisdom_to_filename, :fftwl_export_wisdom_to_filename, [:pointer], :int
  
  # (Not documented)
  # 
  # @method fftwl_export_wisdom_to_file(output_file)
  # @param [Array<unknown>] output_file 
  # @return [nil] 
  # @scope class
  attach_function :fftwl_export_wisdom_to_file, :fftwl_export_wisdom_to_file, [:pointer], :void
  
  # (Not documented)
  # 
  # @method fftwl_export_wisdom_to_string()
  # @return [String] 
  # @scope class
  attach_function :fftwl_export_wisdom_to_string, :fftwl_export_wisdom_to_string, [], :string
  
  # (Not documented)
  # 
  # @method fftwl_export_wisdom(write_char, data)
  # @param [FFI::Pointer(FftwlWriteCharFunc)] write_char 
  # @param [Array<nil>] data 
  # @return [nil] 
  # @scope class
  attach_function :fftwl_export_wisdom, :fftwl_export_wisdom, [:pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method fftwl_import_system_wisdom()
  # @return [Integer] 
  # @scope class
  attach_function :fftwl_import_system_wisdom, :fftwl_import_system_wisdom, [], :int
  
  # (Not documented)
  # 
  # @method fftwl_import_wisdom_from_filename(filename)
  # @param [Array<Integer>] filename 
  # @return [Integer] 
  # @scope class
  attach_function :fftwl_import_wisdom_from_filename, :fftwl_import_wisdom_from_filename, [:pointer], :int
  
  # (Not documented)
  # 
  # @method fftwl_import_wisdom_from_file(input_file)
  # @param [Array<unknown>] input_file 
  # @return [Integer] 
  # @scope class
  attach_function :fftwl_import_wisdom_from_file, :fftwl_import_wisdom_from_file, [:pointer], :int
  
  # (Not documented)
  # 
  # @method fftwl_import_wisdom_from_string(input_string)
  # @param [Array<Integer>] input_string 
  # @return [Integer] 
  # @scope class
  attach_function :fftwl_import_wisdom_from_string, :fftwl_import_wisdom_from_string, [:pointer], :int
  
  # (Not documented)
  # 
  # @method fftwl_import_wisdom(read_char, data)
  # @param [FFI::Pointer(FftwlReadCharFunc)] read_char 
  # @param [Array<nil>] data 
  # @return [Integer] 
  # @scope class
  attach_function :fftwl_import_wisdom, :fftwl_import_wisdom, [:pointer, :pointer], :int
  
  # (Not documented)
  # 
  # @method fftwl_fprint_plan(p, output_file)
  # @param [Array<FftwlPlan>] p 
  # @param [Array<unknown>] output_file 
  # @return [nil] 
  # @scope class
  attach_function :fftwl_fprint_plan, :fftwl_fprint_plan, [:pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method fftwl_print_plan(p)
  # @param [Array<FftwlPlan>] p 
  # @return [nil] 
  # @scope class
  attach_function :fftwl_print_plan, :fftwl_print_plan, [:pointer], :void
  
  # (Not documented)
  # 
  # @method fftwl_sprint_plan(p)
  # @param [Array<FftwlPlan>] p 
  # @return [String] 
  # @scope class
  attach_function :fftwl_sprint_plan, :fftwl_sprint_plan, [:pointer], :string
  
  # (Not documented)
  # 
  # @method fftwl_malloc(n)
  # @param [Integer] n 
  # @return [FFI::Pointer(*Void)] 
  # @scope class
  attach_function :fftwl_malloc, :fftwl_malloc, [:ulong], :pointer
  
  # (Not documented)
  # 
  # @method fftwl_alloc_real(n)
  # @param [Integer] n 
  # @return [FFI::Pointer(*LongDouble)] 
  # @scope class
  attach_function :fftwl_alloc_real, :fftwl_alloc_real, [:ulong], :pointer
  
  # (Not documented)
  # 
  # @method fftwl_alloc_complex(n)
  # @param [Integer] n 
  # @return [FFI::Pointer(*FftwlComplex)] 
  # @scope class
  attach_function :fftwl_alloc_complex, :fftwl_alloc_complex, [:ulong], :pointer
  
  # (Not documented)
  # 
  # @method fftwl_free(p)
  # @param [Array<nil>] p 
  # @return [nil] 
  # @scope class
  attach_function :fftwl_free, :fftwl_free, [:pointer], :void
  
  # (Not documented)
  # 
  # @method fftwl_flops(p, add, mul, fmas)
  # @param [Array<FftwlPlan>] p 
  # @param [Array<Float>] add 
  # @param [Array<Float>] mul 
  # @param [Array<Float>] fmas 
  # @return [nil] 
  # @scope class
  attach_function :fftwl_flops, :fftwl_flops, [:pointer, :pointer, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method fftwl_estimate_cost(p)
  # @param [Array<FftwlPlan>] p 
  # @return [Float] 
  # @scope class
  attach_function :fftwl_estimate_cost, :fftwl_estimate_cost, [:pointer], :double
  
  # (Not documented)
  # 
  # @method fftwl_cost(p)
  # @param [Array<FftwlPlan>] p 
  # @return [Float] 
  # @scope class
  attach_function :fftwl_cost, :fftwl_cost, [:pointer], :double
  
  # (Not documented)
  # 
  # @method fftwl_alignment_of(p)
  # @param [FFI::Pointer(*LongDouble)] p 
  # @return [Integer] 
  # @scope class
  attach_function :fftwl_alignment_of, :fftwl_alignment_of, [:pointer], :int
  
end
